{"ast":null,"code":"/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport React from \"react\";\n/**\r\n *\r\n * The `<Charts>` element is a grouping for charts within a row.\r\n * It takes no props. Each chart within the group will be overlaid\r\n * on top of each other.\r\n *\r\n * Here is an example of two line charts within a `<Charts>` group:\r\n *\r\n * ```xml\r\n * <ChartContainer timeRange={audSeries.timerange()}>\r\n *     <ChartRow height=\"200\">\r\n *         <YAxis/>\r\n *         <Charts>\r\n *             <LineChart axis=\"aud\" series={audSeries} style={audStyle}/>\r\n *             <LineChart axis=\"euro\" series={euroSeries} style={euroStyle}/>\r\n *         </Charts>\r\n *         <YAxis/>\r\n *     </ChartRow>\r\n * </ChartContainer>\r\n * ```\r\n *\r\n * ## Making your own chart\r\n *\r\n * Anything within this grouping is considered a chart, meaning it will have\r\n * certain props injected into it. As a result you can easily implement your own chart\r\n * by simply expecting to have these props available and rendering as such.\r\n *\r\n * For your own chart, the render() method should return a SVG group `<g>` at the\r\n * top level, and then your chart rendering within that.\r\n *\r\n * In addition to any props you add to your chart, the following props are passed into\r\n * each chart automatically:\r\n *\r\n * #### timeScale\r\n *\r\n * A d3 scale for the time axis which you can use to transform your data in the x direction\r\n *\r\n * #### yScale\r\n *\r\n * A d3 scale for the y-axis which you can use to transform your data in the y direction\r\n *\r\n * #### width\r\n *\r\n * A the width your chart will render into\r\n */\n\nexport default class Charts extends React.Component {\n  render() {\n    return \"\".concat(this.constructor.name, \" elements are for configuration only\\nand should not be rendered\");\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\Charts.js"],"names":["React","Charts","Component","render","constructor","name"],"mappings":"AAAA;;;;;;;;;AAUA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,eAAe,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAqC;AAChDC,EAAAA,MAAM,GAAG;AACL,qBAAU,KAAKC,WAAL,CAAiBC,IAA3B;AAEH;;AAJ+C","sourcesContent":["/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\n/**\r\n *\r\n * The `<Charts>` element is a grouping for charts within a row.\r\n * It takes no props. Each chart within the group will be overlaid\r\n * on top of each other.\r\n *\r\n * Here is an example of two line charts within a `<Charts>` group:\r\n *\r\n * ```xml\r\n * <ChartContainer timeRange={audSeries.timerange()}>\r\n *     <ChartRow height=\"200\">\r\n *         <YAxis/>\r\n *         <Charts>\r\n *             <LineChart axis=\"aud\" series={audSeries} style={audStyle}/>\r\n *             <LineChart axis=\"euro\" series={euroSeries} style={euroStyle}/>\r\n *         </Charts>\r\n *         <YAxis/>\r\n *     </ChartRow>\r\n * </ChartContainer>\r\n * ```\r\n *\r\n * ## Making your own chart\r\n *\r\n * Anything within this grouping is considered a chart, meaning it will have\r\n * certain props injected into it. As a result you can easily implement your own chart\r\n * by simply expecting to have these props available and rendering as such.\r\n *\r\n * For your own chart, the render() method should return a SVG group `<g>` at the\r\n * top level, and then your chart rendering within that.\r\n *\r\n * In addition to any props you add to your chart, the following props are passed into\r\n * each chart automatically:\r\n *\r\n * #### timeScale\r\n *\r\n * A d3 scale for the time axis which you can use to transform your data in the x direction\r\n *\r\n * #### yScale\r\n *\r\n * A d3 scale for the y-axis which you can use to transform your data in the y direction\r\n *\r\n * #### width\r\n *\r\n * A the width your chart will render into\r\n */\r\nexport default class Charts extends React.Component {\r\n    render() {\r\n        return `${this.constructor.name} elements are for configuration only\r\nand should not be rendered`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}