{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\golde\\\\resin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\golde\\\\resin\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\r\n *  Copyright (c) 2016, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport _ from \"underscore\";\nimport colorbrewer from \"colorbrewer\";\n/**\r\n * For our Style we want to represent two things:\r\n *\r\n *   1. The overall style of an AreaChart should be consistent across a site\r\n *   2. The specific style of a columnName (e.g. \"pressure\") should be consistent\r\n *\r\n * The overall style is implemented with methods specific to\r\n * each chart type or entity:\r\n *\r\n *   - lineChartStyle()\r\n *   - areaChartStyle()\r\n *   - legendStyle()\r\n *   - etc\r\n *\r\n * These will render out an object that can be passed into the\r\n * charts themselves and will control the visual appearance,\r\n * keyed by columnName. This abstracts away the SVG details of the\r\n * underlying DOM elements.\r\n *\r\n * For the specific style we define here three out of the box parameters\r\n * by which one column can be different from another when rendered:\r\n *   - color\r\n *   - width (of a line)\r\n *   - dashed or not\r\n *\r\n */\n\nexport class Styler {\n  /**\r\n   * The columns define the style associated with a particular\r\n   * quantity, such as \"inTraffic\" or \"temperature\". The columns\r\n   * are an array, with each element being either a string, or\r\n   * and object defining the style.\r\n   *\r\n   *  * Using a string makes the assumption that you want to use a\r\n   * color scheme, so you need to define that if you don't want the\r\n   * default. A color will be then assigned to each column based\r\n   * on the scheme. The string is the column name.\r\n   *\r\n   *  * In the second case of providing an object, you define properties\r\n   * of the style yourself. Each object should contain a \"key\" property\r\n   * which is the column name and optionally the `width` and `dashed`\r\n   * property. If you don't supply the color, then the color\r\n   * will come from the scheme.\r\n   *\r\n   */\n  constructor(columns, scheme = \"Paired\") {\n    this.columnStyles = {};\n\n    if (_.isArray(columns)) {\n      columns.forEach(column => {\n        if (_.isString(column)) {\n          this.columnStyles[column] = {\n            key: column\n          };\n        } else if (_.isObject(column)) {\n          const key = column.key,\n                style = _objectWithoutProperties(column, [\"key\"]);\n\n          this.columnStyles[key] = style;\n        }\n      });\n    }\n\n    this.columnNames = _.map(columns, c => {\n      const cc = _.isString(c) ? c : c.key;\n      return cc;\n    });\n\n    if (scheme && !_.has(colorbrewer, scheme)) {\n      throw new Error(\"Unknown scheme '\".concat(scheme, \"' supplied to Style constructor\"));\n    }\n\n    this.colorScheme = scheme;\n  }\n\n  numColumns() {\n    return this.columnNames.length;\n  }\n  /**\r\n   * Returns the color scheme with the appropiate number of colors.\r\n   * If there are more columns than the largest set in the scheme then\r\n   * just the largest scheme set will be returned.\r\n   * If there are less columns than the smallest set in the scheme then\r\n   * just the smallest scheme will be returned.\r\n   * @param  {number} columnCount The number of columns to apply the scheme to\r\n   * @return {array}              An array with the scheme colors in it.\r\n   */\n\n\n  colorLookup(columnCount) {\n    const colorSchemeKeys = _.keys(colorbrewer[this.colorScheme]);\n\n    const minSchemeSize = _.min(colorSchemeKeys);\n\n    const maxSchemeSize = _.max(colorSchemeKeys);\n\n    let colorLookupSize = columnCount > maxSchemeSize ? maxSchemeSize : columnCount;\n    colorLookupSize = _.max([colorLookupSize, minSchemeSize]);\n    return this.colorScheme ? colorbrewer[this.colorScheme][colorLookupSize] : [];\n  }\n  /**\r\n   */\n\n\n  legendStyle(column, type) {\n    const numColumns = this.numColumns();\n    const colorLookup = this.colorLookup(numColumns);\n\n    const i = _.indexOf(this.columnNames, column);\n\n    const columnName = this.columnNames[i];\n    const _this$columnStyles$co = this.columnStyles[columnName],\n          color = _this$columnStyles$co.color,\n          _this$columnStyles$co2 = _this$columnStyles$co.width,\n          width = _this$columnStyles$co2 === void 0 ? 1 : _this$columnStyles$co2,\n          _this$columnStyles$co3 = _this$columnStyles$co.dashed,\n          dashed = _this$columnStyles$co3 === void 0 ? false : _this$columnStyles$co3;\n    const c = color || colorLookup[i % colorLookup.length];\n    let styleSymbol = {};\n\n    if (type === \"swatch\" || type === \"dot\") {\n      styleSymbol = {\n        fill: c,\n        opacity: 0.9,\n        stroke: c,\n        cursor: \"pointer\"\n      };\n    } else if (type === \"line\") {\n      styleSymbol = {\n        opacity: 0.9,\n        stroke: c,\n        strokeWidth: width,\n        cursor: \"pointer\"\n      };\n\n      if (dashed) {\n        styleSymbol.strokeDasharray = \"4,2\";\n      }\n    }\n\n    const labelStyle = {\n      fontSize: \"normal\",\n      color: \"#333\",\n      paddingRight: 10,\n      cursor: \"pointer\"\n    };\n    const valueStyle = {\n      fontSize: \"smaller\",\n      color: \"#999\",\n      cursor: \"pointer\"\n    };\n    const legendStyle = {\n      symbol: {\n        normal: _objectSpread({}, styleSymbol, {\n          opacity: 0.7\n        }),\n        highlighted: _objectSpread({}, styleSymbol, {\n          opacity: 0.8\n        }),\n        selected: _objectSpread({}, styleSymbol, {\n          opacity: 0.8\n        }),\n        muted: _objectSpread({}, styleSymbol, {\n          opacity: 0.2\n        })\n      },\n      label: {\n        normal: _objectSpread({}, labelStyle, {\n          opacity: 0.7\n        }),\n        highlighted: _objectSpread({}, labelStyle, {\n          opacity: 0.8\n        }),\n        selected: _objectSpread({}, labelStyle, {\n          opacity: 0.8\n        }),\n        muted: _objectSpread({}, labelStyle, {\n          opacity: 0.5\n        })\n      },\n      value: {\n        normal: _objectSpread({}, valueStyle, {\n          opacity: 0.7\n        }),\n        highlighted: _objectSpread({}, valueStyle, {\n          opacity: 0.8\n        }),\n        selected: _objectSpread({}, valueStyle, {\n          opacity: 0.8\n        }),\n        muted: _objectSpread({}, valueStyle, {\n          opacity: 0.5\n        })\n      }\n    };\n    return legendStyle;\n  }\n\n  areaChartStyle() {\n    const style = {};\n    const numColumns = this.numColumns();\n    const colorLookup = this.colorLookup(numColumns);\n    let i = 0;\n\n    _.forEach(this.columnStyles, ({\n      color,\n      selected,\n      width = 1,\n      dashed = false\n    }, column) => {\n      const c = color || colorLookup[i % colorLookup.length];\n      const styleLine = {\n        stroke: c,\n        fill: \"none\",\n        strokeWidth: width\n      };\n      const styleSelectedLine = {\n        stroke: selected || color,\n        fill: \"none\",\n        strokeWidth: width\n      };\n\n      if (dashed) {\n        styleLine.strokeDasharray = \"4,2\";\n      }\n\n      const styleArea = {\n        fill: c,\n        stroke: \"none\"\n      };\n      const styleSelectedArea = {\n        fill: selected || color,\n        stroke: \"none\"\n      };\n      style[column] = {\n        line: {\n          normal: _objectSpread({}, styleLine, {\n            opacity: 0.9\n          }),\n          highlighted: _objectSpread({}, styleLine, {\n            opacity: 1.0\n          }),\n          selected: _objectSpread({}, styleSelectedLine, {\n            opacity: 1.0\n          }),\n          muted: _objectSpread({}, styleLine, {\n            opacity: 0.4\n          })\n        },\n        area: {\n          normal: _objectSpread({}, styleArea, {\n            opacity: 0.7\n          }),\n          highlighted: _objectSpread({}, styleArea, {\n            opacity: 0.8\n          }),\n          selected: _objectSpread({}, styleSelectedArea, {\n            opacity: 0.8\n          }),\n          muted: _objectSpread({}, styleArea, {\n            opacity: 0.2\n          })\n        }\n      };\n      i += 1;\n    });\n\n    return style;\n  }\n\n  lineChartStyle() {\n    const numColumns = this.numColumns();\n    const colorLookup = this.colorLookup(numColumns);\n    const style = {};\n\n    _.forEach(this.columnStyles, ({\n      color,\n      selected,\n      width = 1,\n      dashed = false\n    }, column) => {\n      const i = _.indexOf(this.columnNames, column);\n\n      const c = color || colorLookup[i % colorLookup.length];\n      const styleLine = {\n        stroke: c,\n        strokeWidth: width,\n        fill: \"none\"\n      };\n      const styleSelectedLine = {\n        stroke: selected || c,\n        strokeWidth: width,\n        fill: \"none\"\n      };\n\n      if (dashed) {\n        styleLine.strokeDasharray = \"4,2\";\n      }\n\n      style[column] = {\n        normal: _objectSpread({}, styleLine, {\n          opacity: 0.8,\n          strokeWidth: width\n        }),\n        highlighted: _objectSpread({}, styleLine, {\n          opacity: 1.0,\n          strokeWidth: width\n        }),\n        selected: _objectSpread({}, styleSelectedLine, {\n          opacity: 1.0,\n          strokeWidth: width\n        }),\n        muted: _objectSpread({}, styleLine, {\n          opacity: 0.2,\n          strokeWidth: width\n        })\n      };\n    });\n\n    return style;\n  }\n\n  barChartStyle() {\n    const numColumns = this.numColumns();\n    const colorLookup = this.colorLookup(numColumns);\n    const style = {};\n\n    _.forEach(this.columnStyles, ({\n      color,\n      selected\n    }, column) => {\n      const i = _.indexOf(this.columnNames, column);\n\n      const c = color || colorLookup[i % colorLookup.length];\n      const fillStyle = {\n        fill: c\n      };\n      const selectedStyle = {\n        fill: selected || c\n      };\n      style[column] = {\n        normal: _objectSpread({}, fillStyle, {\n          opacity: 0.8\n        }),\n        highlighted: _objectSpread({}, fillStyle, {\n          opacity: 1.0\n        }),\n        selected: _objectSpread({}, selectedStyle, {\n          opacity: 1.0\n        }),\n        muted: _objectSpread({}, fillStyle, {\n          opacity: 0.2\n        })\n      };\n    });\n\n    return style;\n  }\n\n  scatterChartStyle() {\n    const numColumns = this.numColumns();\n    const colorLookup = this.colorLookup(numColumns);\n    const style = {};\n\n    _.forEach(this.columnStyles, ({\n      color,\n      selected\n    }, column) => {\n      const i = _.indexOf(this.columnNames, column);\n\n      const c = color || colorLookup[i % colorLookup.length];\n      const fillStyle = {\n        fill: c\n      };\n      const selectedStyle = {\n        fill: selected || c\n      };\n      style[column] = {\n        normal: _objectSpread({}, fillStyle, {\n          opacity: 0.8\n        }),\n        highlighted: _objectSpread({}, fillStyle, {\n          opacity: 1.0\n        }),\n        selected: _objectSpread({}, selectedStyle, {\n          opacity: 1.0\n        }),\n        muted: _objectSpread({}, fillStyle, {\n          opacity: 0.2\n        })\n      };\n    });\n\n    return style;\n  }\n\n  axisStyle(column) {\n    const numColumns = this.numColumns();\n    const colorLookup = this.colorLookup(numColumns);\n\n    const i = _.indexOf(this.columnNames, column);\n\n    const columnName = this.columnNames[i];\n    const color = this.columnStyles[columnName].color;\n    const c = color || colorLookup[i % colorLookup.length];\n    return {\n      label: {\n        fill: c\n      }\n    };\n  }\n\n  boxChartStyle() {\n    const style = {};\n    const numColumns = this.numColumns();\n    const colorLookup = this.colorLookup(numColumns);\n    let i = 0;\n\n    _.forEach(this.columnStyles, ({\n      color,\n      selected\n    }, column) => {\n      const c = color || colorLookup[i % colorLookup.length];\n      const styleArea = {\n        fill: c,\n        stroke: \"none\"\n      };\n      const styleSelectedArea = {\n        fill: selected || color,\n        stroke: \"none\"\n      };\n      style[column] = [{\n        normal: _objectSpread({}, styleArea, {\n          opacity: 0.2\n        }),\n        highlighted: _objectSpread({}, styleArea, {\n          opacity: 0.3\n        }),\n        selected: _objectSpread({}, styleSelectedArea, {\n          opacity: 0.3\n        }),\n        muted: _objectSpread({}, styleArea, {\n          opacity: 0.1\n        })\n      }, {\n        normal: _objectSpread({}, styleArea, {\n          opacity: 0.5\n        }),\n        highlighted: _objectSpread({}, styleArea, {\n          opacity: 0.6\n        }),\n        selected: _objectSpread({}, styleSelectedArea, {\n          opacity: 0.6\n        }),\n        muted: _objectSpread({}, styleArea, {\n          opacity: 0.2\n        })\n      }, {\n        normal: _objectSpread({}, styleArea, {\n          opacity: 0.9\n        }),\n        highlighted: _objectSpread({}, styleArea, {\n          opacity: 1.0\n        }),\n        selected: _objectSpread({}, styleSelectedArea, {\n          opacity: 1.0\n        }),\n        muted: _objectSpread({}, styleArea, {\n          opacity: 0.2\n        })\n      }];\n      i += 1;\n    });\n\n    return style;\n  }\n\n}\nexport default function styler(columns, scheme) {\n  return new Styler(columns, scheme);\n}","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\utils\\styler.js"],"names":["_","colorbrewer","Styler","constructor","columns","scheme","columnStyles","isArray","forEach","column","isString","key","isObject","style","columnNames","map","c","cc","has","Error","colorScheme","numColumns","length","colorLookup","columnCount","colorSchemeKeys","keys","minSchemeSize","min","maxSchemeSize","max","colorLookupSize","legendStyle","type","i","indexOf","columnName","color","width","dashed","styleSymbol","fill","opacity","stroke","cursor","strokeWidth","strokeDasharray","labelStyle","fontSize","paddingRight","valueStyle","symbol","normal","highlighted","selected","muted","label","value","areaChartStyle","styleLine","styleSelectedLine","styleArea","styleSelectedArea","line","area","lineChartStyle","barChartStyle","fillStyle","selectedStyle","scatterChartStyle","axisStyle","boxChartStyle","styler"],"mappings":"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","sourcesContent":["/**\r\n *  Copyright (c) 2016, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport colorbrewer from \"colorbrewer\";\r\n\r\n/**\r\n * For our Style we want to represent two things:\r\n *\r\n *   1. The overall style of an AreaChart should be consistent across a site\r\n *   2. The specific style of a columnName (e.g. \"pressure\") should be consistent\r\n *\r\n * The overall style is implemented with methods specific to\r\n * each chart type or entity:\r\n *\r\n *   - lineChartStyle()\r\n *   - areaChartStyle()\r\n *   - legendStyle()\r\n *   - etc\r\n *\r\n * These will render out an object that can be passed into the\r\n * charts themselves and will control the visual appearance,\r\n * keyed by columnName. This abstracts away the SVG details of the\r\n * underlying DOM elements.\r\n *\r\n * For the specific style we define here three out of the box parameters\r\n * by which one column can be different from another when rendered:\r\n *   - color\r\n *   - width (of a line)\r\n *   - dashed or not\r\n *\r\n */\r\nexport class Styler {\r\n    /**\r\n     * The columns define the style associated with a particular\r\n     * quantity, such as \"inTraffic\" or \"temperature\". The columns\r\n     * are an array, with each element being either a string, or\r\n     * and object defining the style.\r\n     *\r\n     *  * Using a string makes the assumption that you want to use a\r\n     * color scheme, so you need to define that if you don't want the\r\n     * default. A color will be then assigned to each column based\r\n     * on the scheme. The string is the column name.\r\n     *\r\n     *  * In the second case of providing an object, you define properties\r\n     * of the style yourself. Each object should contain a \"key\" property\r\n     * which is the column name and optionally the `width` and `dashed`\r\n     * property. If you don't supply the color, then the color\r\n     * will come from the scheme.\r\n     *\r\n     */\r\n    constructor(columns, scheme = \"Paired\") {\r\n        this.columnStyles = {};\r\n        if (_.isArray(columns)) {\r\n            columns.forEach(column => {\r\n                if (_.isString(column)) {\r\n                    this.columnStyles[column] = { key: column };\r\n                } else if (_.isObject(column)) {\r\n                    const { key, ...style } = column;\r\n                    this.columnStyles[key] = style;\r\n                }\r\n            });\r\n        }\r\n        this.columnNames = _.map(columns, c => {\r\n            const cc = _.isString(c) ? c : c.key;\r\n            return cc;\r\n        });\r\n\r\n        if (scheme && !_.has(colorbrewer, scheme)) {\r\n            throw new Error(`Unknown scheme '${scheme}' supplied to Style constructor`);\r\n        }\r\n        this.colorScheme = scheme;\r\n    }\r\n\r\n    numColumns() {\r\n        return this.columnNames.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the color scheme with the appropiate number of colors.\r\n     * If there are more columns than the largest set in the scheme then\r\n     * just the largest scheme set will be returned.\r\n     * If there are less columns than the smallest set in the scheme then\r\n     * just the smallest scheme will be returned.\r\n     * @param  {number} columnCount The number of columns to apply the scheme to\r\n     * @return {array}              An array with the scheme colors in it.\r\n     */\r\n    colorLookup(columnCount) {\r\n        const colorSchemeKeys = _.keys(colorbrewer[this.colorScheme]);\r\n        const minSchemeSize = _.min(colorSchemeKeys);\r\n        const maxSchemeSize = _.max(colorSchemeKeys);\r\n        let colorLookupSize = columnCount > maxSchemeSize ? maxSchemeSize : columnCount;\r\n        colorLookupSize = _.max([colorLookupSize, minSchemeSize]);\r\n        return this.colorScheme ? colorbrewer[this.colorScheme][colorLookupSize] : [];\r\n    }\r\n\r\n    /**\r\n     */\r\n    legendStyle(column, type) {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const i = _.indexOf(this.columnNames, column);\r\n        const columnName = this.columnNames[i];\r\n        const { color, width = 1, dashed = false } = this.columnStyles[columnName];\r\n        const c = color || colorLookup[i % colorLookup.length];\r\n\r\n        let styleSymbol = {};\r\n        if (type === \"swatch\" || type === \"dot\") {\r\n            styleSymbol = {\r\n                fill: c,\r\n                opacity: 0.9,\r\n                stroke: c,\r\n                cursor: \"pointer\"\r\n            };\r\n        } else if (type === \"line\") {\r\n            styleSymbol = {\r\n                opacity: 0.9,\r\n                stroke: c,\r\n                strokeWidth: width,\r\n                cursor: \"pointer\"\r\n            };\r\n            if (dashed) {\r\n                styleSymbol.strokeDasharray = \"4,2\";\r\n            }\r\n        }\r\n\r\n        const labelStyle = {\r\n            fontSize: \"normal\",\r\n            color: \"#333\",\r\n            paddingRight: 10,\r\n            cursor: \"pointer\"\r\n        };\r\n        const valueStyle = {\r\n            fontSize: \"smaller\",\r\n            color: \"#999\",\r\n            cursor: \"pointer\"\r\n        };\r\n        const legendStyle = {\r\n            symbol: {\r\n                normal: { ...styleSymbol, opacity: 0.7 },\r\n                highlighted: { ...styleSymbol, opacity: 0.8 },\r\n                selected: { ...styleSymbol, opacity: 0.8 },\r\n                muted: { ...styleSymbol, opacity: 0.2 }\r\n            },\r\n            label: {\r\n                normal: { ...labelStyle, opacity: 0.7 },\r\n                highlighted: { ...labelStyle, opacity: 0.8 },\r\n                selected: { ...labelStyle, opacity: 0.8 },\r\n                muted: { ...labelStyle, opacity: 0.5 }\r\n            },\r\n            value: {\r\n                normal: { ...valueStyle, opacity: 0.7 },\r\n                highlighted: { ...valueStyle, opacity: 0.8 },\r\n                selected: { ...valueStyle, opacity: 0.8 },\r\n                muted: { ...valueStyle, opacity: 0.5 }\r\n            }\r\n        };\r\n        return legendStyle;\r\n    }\r\n\r\n    areaChartStyle() {\r\n        const style = {};\r\n\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n\r\n        let i = 0;\r\n        _.forEach(this.columnStyles, ({ color, selected, width = 1, dashed = false }, column) => {\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleLine = {\r\n                stroke: c,\r\n                fill: \"none\",\r\n                strokeWidth: width\r\n            };\r\n            const styleSelectedLine = {\r\n                stroke: selected || color,\r\n                fill: \"none\",\r\n                strokeWidth: width\r\n            };\r\n            if (dashed) {\r\n                styleLine.strokeDasharray = \"4,2\";\r\n            }\r\n            const styleArea = {\r\n                fill: c,\r\n                stroke: \"none\"\r\n            };\r\n            const styleSelectedArea = {\r\n                fill: selected || color,\r\n                stroke: \"none\"\r\n            };\r\n            style[column] = {\r\n                line: {\r\n                    normal: { ...styleLine, opacity: 0.9 },\r\n                    highlighted: { ...styleLine, opacity: 1.0 },\r\n                    selected: { ...styleSelectedLine, opacity: 1.0 },\r\n                    muted: { ...styleLine, opacity: 0.4 }\r\n                },\r\n                area: {\r\n                    normal: { ...styleArea, opacity: 0.7 },\r\n                    highlighted: { ...styleArea, opacity: 0.8 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.8 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                }\r\n            };\r\n            i += 1;\r\n        });\r\n        return style;\r\n    }\r\n\r\n    lineChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected, width = 1, dashed = false }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleLine = {\r\n                stroke: c,\r\n                strokeWidth: width,\r\n                fill: \"none\"\r\n            };\r\n            const styleSelectedLine = {\r\n                stroke: selected || c,\r\n                strokeWidth: width,\r\n                fill: \"none\"\r\n            };\r\n\r\n            if (dashed) {\r\n                styleLine.strokeDasharray = \"4,2\";\r\n            }\r\n            style[column] = {\r\n                normal: { ...styleLine, opacity: 0.8, strokeWidth: width },\r\n                highlighted: { ...styleLine, opacity: 1.0, strokeWidth: width },\r\n                selected: { ...styleSelectedLine, opacity: 1.0, strokeWidth: width },\r\n                muted: { ...styleLine, opacity: 0.2, strokeWidth: width }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    barChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const fillStyle = {\r\n                fill: c\r\n            };\r\n            const selectedStyle = {\r\n                fill: selected || c\r\n            };\r\n            style[column] = {\r\n                normal: { ...fillStyle, opacity: 0.8 },\r\n                highlighted: { ...fillStyle, opacity: 1.0 },\r\n                selected: { ...selectedStyle, opacity: 1.0 },\r\n                muted: { ...fillStyle, opacity: 0.2 }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    scatterChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const fillStyle = {\r\n                fill: c\r\n            };\r\n            const selectedStyle = {\r\n                fill: selected || c\r\n            };\r\n            style[column] = {\r\n                normal: { ...fillStyle, opacity: 0.8 },\r\n                highlighted: { ...fillStyle, opacity: 1.0 },\r\n                selected: { ...selectedStyle, opacity: 1.0 },\r\n                muted: { ...fillStyle, opacity: 0.2 }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    axisStyle(column) {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const i = _.indexOf(this.columnNames, column);\r\n        const columnName = this.columnNames[i];\r\n        const { color } = this.columnStyles[columnName];\r\n        const c = color || colorLookup[i % colorLookup.length];\r\n        return {\r\n            label: {\r\n                fill: c\r\n            }\r\n        };\r\n    }\r\n\r\n    boxChartStyle() {\r\n        const style = {};\r\n\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n\r\n        let i = 0;\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleArea = {\r\n                fill: c,\r\n                stroke: \"none\"\r\n            };\r\n            const styleSelectedArea = {\r\n                fill: selected || color,\r\n                stroke: \"none\"\r\n            };\r\n            style[column] = [\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.2 },\r\n                    highlighted: { ...styleArea, opacity: 0.3 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.3 },\r\n                    muted: { ...styleArea, opacity: 0.1 }\r\n                },\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.5 },\r\n                    highlighted: { ...styleArea, opacity: 0.6 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.6 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                },\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.9 },\r\n                    highlighted: { ...styleArea, opacity: 1.0 },\r\n                    selected: { ...styleSelectedArea, opacity: 1.0 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                }\r\n            ];\r\n            i += 1;\r\n        });\r\n        return style;\r\n    }\r\n}\r\n\r\nexport default function styler(columns, scheme) {\r\n    return new Styler(columns, scheme);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}