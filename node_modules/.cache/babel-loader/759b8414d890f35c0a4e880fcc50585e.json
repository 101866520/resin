{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golde\\\\resin\\\\src\\\\ChartContainer.js\";\n\n/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport _ from \"underscore\";\nimport invariant from \"invariant\";\nimport merge from \"merge\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { scaleTime, scaleUtc } from \"d3-scale\";\nimport { TimeRange } from \"pondjs\";\nimport { areComponentsEqual } from \"react-hot-loader\";\nimport Brush from \"./Brush\";\nimport MultiBrush from \"./MultiBrush\";\nimport ChartRow from \"./ChartRow\";\nimport Charts from \"./Charts\";\nimport EventHandler from \"./EventHandler\";\nimport TimeAxis from \"./TimeAxis\";\nimport TimeMarker from \"./TimeMarker\";\nimport Label from \"./Label\";\nconst defaultTimeAxisStyle = {\n  axis: {\n    fill: \"none\",\n    stroke: \"#C0C0C0\",\n    pointerEvents: \"none\"\n  }\n};\nconst defaultTitleStyle = {\n  fontWeight: 100,\n  fontSize: 14,\n  font: '\"Goudy Bookletter 1911\", sans-serif\"',\n  fill: \"#C0C0C0\"\n};\nconst defaultChartRowTitleLabelStyle = {\n  fontWeight: 100,\n  fontSize: 13,\n  font: '\"Goudy Bookletter 1911\", sans-serif\"',\n  fill: \"#000\"\n};\nconst defaultChartRowTitleBoxStyle = {\n  fill: \"white\",\n  stroke: \"none\"\n};\nconst defaultTrackerStyle = {\n  line: {\n    stroke: \"#999\",\n    cursor: \"crosshair\",\n    pointerEvents: \"none\"\n  },\n  box: {\n    fill: \"white\",\n    opacity: 0.9,\n    stroke: \"#999\",\n    pointerEvents: \"none\"\n  },\n  dot: {\n    fill: \"#999\"\n  }\n};\n/**\r\n * The `<ChartContainer>` is the outer most element of a chart and is\r\n * responsible for generating and arranging its sub-elements. Specifically,\r\n * it is a container for one or more `<ChartRows>` (each of which contains\r\n * charts, axes etc) and in addition it manages the overall time range of\r\n * the chart and so also is responsible for the time axis, which is always\r\n * shared by all the rows.\r\n *\r\n * Here is an example:\r\n *\r\n * ```xml\r\n * <ChartContainer timeRange={audSeries.timerange()} width=\"800\">\r\n *     <ChartRow>\r\n *         ...\r\n *     </ChartRow>\r\n *     <ChartRow>\r\n *         ...\r\n *     </ChartRow>\r\n * </ChartContainer>\r\n * ```\r\n */\n\nexport default class ChartContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    alert(0);\n    this.handleTrackerChanged = this.handleTrackerChanged.bind(this);\n    this.handleTimeRangeChanged = this.handleTimeRangeChanged.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.handleContextMenu = this.handleContextMenu.bind(this);\n    this.handleBackgroundClick = this.handleBackgroundClick.bind(this);\n    this.handleZoom = this.handleZoom.bind(this);\n    this.saveSvgRef = this.saveSvgRef.bind(this);\n  } //\n  // Event handlers\n  //\n\n\n  handleTrackerChanged(t) {\n    if (this.props.onTrackerChanged) {\n      this.props.onTrackerChanged(t, // Adjust the scaled time so that the result\n      // is the true x position relative to the whole chart\n      t => this.timeScale(t) + this.leftWidth);\n    }\n  }\n  /**\r\n   * Within the charts library the time range of the x axis is kept as a begin\r\n   * and end time (Javascript Date objects). But the interface is Pond based,\r\n   * so this callback returns a Pond TimeRange.\r\n   */\n\n\n  handleTimeRangeChanged(timerange) {\n    if (this.props.onTimeRangeChanged) {\n      this.props.onTimeRangeChanged(timerange);\n    }\n  }\n\n  handleMouseMove(x, y) {\n    this.handleTrackerChanged(this.timeScale.invert(x));\n\n    if (this.props.onMouseMove) {\n      this.props.onMouseMove(x, y);\n    }\n  }\n\n  handleMouseOut(e) {\n    this.handleTrackerChanged(null);\n  }\n\n  handleContextMenu(x, y) {\n    if (this.props.onContextMenu) {\n      const t = this.props.scale ? this.props.scale.invert(x) : this.timeScale.invert(x);\n      this.props.onContextMenu(x, y, t);\n    }\n  }\n\n  handleBackgroundClick(x, y) {\n    if (this.props.onBackgroundClick) {\n      const t = this.props.scale ? this.props.scale.invert(x) : this.timeScale.invert(x);\n      this.props.onBackgroundClick(x, y, t);\n    }\n  }\n\n  handleZoom(timerange) {\n    if (this.props.onTimeRangeChanged) {\n      this.props.onTimeRangeChanged(timerange);\n    }\n  }\n\n  saveSvgRef(c) {\n    this.svg = c;\n  } //\n  // Render\n  //\n\n\n  render() {\n    const _this$props$padding = this.props.padding,\n          padding = _this$props$padding === void 0 ? 0 : _this$props$padding;\n    const _this$props = this.props,\n          _this$props$paddingLe = _this$props.paddingLeft,\n          paddingLeft = _this$props$paddingLe === void 0 ? padding : _this$props$paddingLe,\n          _this$props$paddingRi = _this$props.paddingRight,\n          paddingRight = _this$props$paddingRi === void 0 ? padding : _this$props$paddingRi;\n    const _this$props2 = this.props,\n          _this$props2$paddingT = _this$props2.paddingTop,\n          paddingTop = _this$props2$paddingT === void 0 ? padding : _this$props2$paddingT,\n          _this$props2$paddingB = _this$props2.paddingBottom,\n          paddingBottom = _this$props2$paddingB === void 0 ? padding : _this$props2$paddingB;\n    let _this$props$titleHeig = this.props.titleHeight,\n        titleHeight = _this$props$titleHeig === void 0 ? 28 : _this$props$titleHeig;\n\n    if (_.isUndefined(this.props.title)) {\n      titleHeight = 0;\n    }\n\n    const chartRows = [];\n    const chartRowTitles = [];\n    const leftAxisWidths = [];\n    const rightAxisWidths = []; //\n    // How much room does the axes of all the charts take up on the right\n    // and left. The result is an array for left and right axis which\n    // contain the min column width needed to hold the axes widths at the\n    // pos for all rows.\n    //\n    // pos   1      0        <charts>     0        1        2\n    //     | Axis | Axis |   CHARTS    |  Axis  |                      Row 1\n    //            | Axis |   CHARTS    |  Axis  |  Axis  |  Axis |     Row 2\n    //     ...............              ..........................\n    //          left cols              right cols\n    //\n\n    React.Children.forEach(this.props.children, childRow => {\n      if (areComponentsEqual(childRow.type, ChartRow)) {\n        //\n        // Within this row, count the number of columns that will be\n        // left and right of the Charts tag, as well as the total number\n        // of Charts tags for error handling\n        //\n        let countLeft = 0;\n        let countCharts = 0;\n        let align = \"left\";\n        React.Children.forEach(childRow.props.children, child => {\n          if (child === null) return;\n\n          if (areComponentsEqual(child.type, Charts)) {\n            countCharts += 1;\n            align = \"right\";\n          } else if (!areComponentsEqual(child.type, Brush) && !areComponentsEqual(child.type, MultiBrush)) {\n            if (align === \"left\") {\n              countLeft += 1;\n            }\n          }\n        });\n\n        if (countCharts !== 1) {\n          const msg = \"ChartRow should have one and only one <Charts> tag within it\";\n          invariant(false, msg, childRow.constructor.name);\n        }\n\n        align = \"left\";\n        let pos = countLeft - 1;\n        React.Children.forEach(childRow.props.children, child => {\n          if (child === null) return;\n\n          if (areComponentsEqual(child.type, Charts) || areComponentsEqual(child.type, Brush) || areComponentsEqual(child.type, MultiBrush)) {\n            if (areComponentsEqual(child.type, Charts)) {\n              align = \"right\";\n              pos = 0;\n            }\n          } else {\n            let width = Number(child.props.width) || 40;\n            const visible = !_.has(child.props, \"visible\") || child.props.visible;\n            if (!visible) width = 0;\n\n            if (align === \"left\") {\n              leftAxisWidths[pos] = leftAxisWidths[pos] ? Math.max(width, leftAxisWidths[pos]) : width;\n              pos -= 1;\n            } else if (align === \"right\") {\n              rightAxisWidths[pos] = rightAxisWidths[pos] ? Math.max(width, rightAxisWidths[pos]) : width;\n              pos += 1;\n            }\n          }\n        });\n      }\n    }); // Space used by columns on left and right of charts\n\n    const leftWidth = this.leftWidth = _.reduce(leftAxisWidths, (a, b) => a + b, 0);\n\n    const rightWidth = this.rightWidth = _.reduce(rightAxisWidths, (a, b) => a + b, 0); //\n    // Time scale\n    //\n\n\n    let _this$props$timeAxisH = this.props.timeAxisHeight,\n        timeAxisHeight = _this$props$timeAxisH === void 0 ? 35 : _this$props$timeAxisH;\n\n    if (this.props.hideTimeAxis) {\n      timeAxisHeight = 0;\n    }\n\n    const timeAxisWidth = this.props.width - leftWidth - rightWidth - paddingLeft - paddingRight;\n\n    if (!this.props.timeRange) {\n      throw Error(\"Invalid timerange passed to ChartContainer\");\n    }\n\n    const timeScale = this.timeScale = this.props.utc ? scaleUtc().domain(this.props.timeRange.toJSON()).range([0, timeAxisWidth]) : scaleTime().domain(this.props.timeRange.toJSON()).range([0, timeAxisWidth]);\n    const chartsWidth = this.props.width - leftWidth - rightWidth - paddingLeft - paddingRight;\n    let i = 0;\n    let yPosition = paddingTop; // Chart title\n\n    const transform = \"translate(\".concat(leftWidth + paddingLeft, \",\").concat(yPosition, \")\");\n    const titleStyle = merge(true, defaultTitleStyle, this.props.titleStyle ? this.props.titleStyle : {});\n    const title = this.props.title ? React.createElement(\"g\", {\n      transform: transform,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(Label, {\n      align: \"center\",\n      label: this.props.title,\n      style: {\n        label: titleStyle,\n        box: {\n          fill: \"none\",\n          stroke: \"none\"\n        }\n      },\n      width: chartsWidth,\n      height: titleHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    })) : React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    });\n    const trackerStyle = merge(true, defaultTrackerStyle, this.props.trackerStyle ? this.props.trackerStyle : {}); //yPosition += titleHeight;\n\n    let chartsHeight = 0;\n    React.Children.forEach(this.props.children, child => {\n      if (areComponentsEqual(child.type, ChartRow)) {\n        const chartRow = child;\n        const rowKey = \"chart-row-row-\".concat(i);\n        const firstRow = i === 0;\n        const isVisible = child.props.visible;\n        const props = {\n          timeScale,\n          paddingLeft,\n          paddingRight,\n          leftAxisWidths,\n          rightAxisWidths,\n          width: this.props.width,\n          minTime: this.props.minTime,\n          maxTime: this.props.maxTime,\n          transition: this.props.transition,\n          enablePanZoom: this.props.enablePanZoom,\n          minDuration: this.props.minDuration,\n          showGrid: this.props.showGrid,\n          timeFormat: this.props.format,\n          trackerShowTime: firstRow,\n          trackerTime: this.props.trackerPosition,\n          trackerTimeFormat: this.props.format,\n          trackerStyle: trackerStyle,\n          onTimeRangeChanged: this.handleTimeRangeChanged,\n          onTrackerChanged: this.handleTrackerChanged\n        };\n        let _child$props$titleHei = child.props.titleHeight,\n            titleHeight = _child$props$titleHei === void 0 ? 28 : _child$props$titleHei;\n\n        if (_.isUndefined(child.props.title)) {\n          titleHeight = 0;\n        }\n\n        const transform = \"translate(\".concat(-leftWidth - paddingLeft, \",\").concat(yPosition + titleHeight, \")\");\n\n        if (isVisible) {\n          chartRows.push(React.createElement(\"g\", {\n            transform: transform,\n            key: rowKey,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 382\n            },\n            __self: this\n          }, React.cloneElement(chartRow, props)));\n\n          if (!_.isUndefined(child.props.title)) {\n            const rowTitleKey = \"chart-row-row-title-\".concat(i);\n            const titleLabelStyle = merge(true, defaultChartRowTitleLabelStyle, child.props.titleStyle ? child.props.titleStyle : {});\n            const titleBoxStyle = merge(true, defaultChartRowTitleBoxStyle, child.props.titleBoxStyle ? child.props.titleBoxStyle : {});\n            const titleTransform = \"translate(\".concat(-leftWidth - paddingLeft, \",\").concat(yPosition, \")\");\n            const title = React.createElement(\"g\", {\n              transform: titleTransform,\n              key: rowTitleKey,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 403\n              },\n              __self: this\n            }, React.createElement(Label, {\n              align: \"left\",\n              label: child.props.title,\n              style: {\n                label: titleLabelStyle,\n                box: titleBoxStyle\n              },\n              width: props.width,\n              height: titleHeight,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 404\n              },\n              __self: this\n            }));\n            chartRowTitles.push(title);\n          }\n\n          const height = parseInt(child.props.height, 10) + titleHeight;\n          yPosition += height;\n          chartsHeight += height;\n        }\n      }\n\n      i += 1;\n    }); // Hover tracker line\n\n    let tracker;\n\n    if (this.props.trackerPosition && this.props.timeRange.contains(this.props.trackerPosition)) {\n      tracker = React.createElement(\"g\", {\n        key: \"tracker-group\",\n        style: {\n          pointerEvents: \"none\"\n        },\n        transform: \"translate(\".concat(leftWidth + paddingLeft, \",\").concat(paddingTop + titleHeight, \")\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, React.createElement(TimeMarker, {\n        width: chartsWidth,\n        height: chartsHeight,\n        showInfoBox: !!this.props.trackerValues,\n        time: this.props.trackerPosition,\n        timeScale: timeScale,\n        timeFormat: this.props.format,\n        infoWidth: this.props.trackerHintWidth,\n        infoHeight: this.props.trackerHintHeight,\n        infoValues: this.props.trackerValues,\n        infoStyle: trackerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      }));\n    } //\n    // TimeAxis\n    //\n\n\n    let timeAxisStyle;\n\n    if (this.props.hideTimeAxis) {\n      timeAxisStyle = {\n        axis: {\n          display: \"none\"\n        }\n      };\n    } else {\n      timeAxisStyle = merge(true, defaultTimeAxisStyle.axis, this.props.timeAxisStyle.axis ? this.props.timeAxisStyle.axis : {});\n    }\n\n    const timeAxis = React.createElement(\"g\", {\n      transform: \"translate(\".concat(leftWidth + paddingLeft, \",\").concat(paddingTop + titleHeight + chartsHeight, \")\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      x1: -leftWidth,\n      y1: 0.5,\n      x2: chartsWidth + rightWidth,\n      y2: 0.5,\n      style: timeAxisStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }), React.createElement(TimeAxis, {\n      scale: timeScale,\n      utc: this.props.utc,\n      angled: this.props.timeAxisAngledLabels,\n      style: this.props.timeAxisStyle,\n      format: this.props.format,\n      showGrid: this.props.showGrid,\n      gridHeight: chartsHeight,\n      tickCount: this.props.timeAxisTickCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    })); //\n    // Event handler\n    //\n\n    const rows = React.createElement(\"g\", {\n      transform: \"translate(\".concat(leftWidth + paddingLeft, \",\").concat(paddingTop + titleHeight, \")\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(EventHandler, {\n      key: \"event-handler\",\n      width: chartsWidth,\n      height: chartsHeight + timeAxisHeight,\n      scale: timeScale,\n      enablePanZoom: this.props.enablePanZoom,\n      enableDragZoom: this.props.enableDragZoom,\n      minDuration: this.props.minDuration,\n      minTime: this.props.minTime,\n      maxTime: this.props.maxTime,\n      onMouseOut: this.handleMouseOut,\n      onMouseMove: this.handleMouseMove,\n      onMouseClick: this.handleBackgroundClick,\n      onContextMenu: this.handleContextMenu,\n      onZoom: this.handleZoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, chartRows));\n    const rowTitles = React.createElement(\"g\", {\n      transform: \"translate(\".concat(leftWidth + paddingLeft, \",\").concat(paddingTop + titleHeight, \")\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, chartRowTitles); //\n    // Final render of the ChartContainer is composed of a number of\n    // chartRows, a timeAxis and the tracker indicator\n    //\n\n    const svgWidth = this.props.width;\n    const svgHeight = chartsHeight + timeAxisHeight + paddingTop + paddingBottom + titleHeight;\n    const svgStyle = merge(true, {\n      display: \"block\"\n    }, this.props.style ? this.props.style : {});\n    return this.props.showGridPosition === \"over\" ? React.createElement(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      style: svgStyle,\n      ref: this.saveSvgRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, title, rows, tracker, timeAxis, rowTitles) : React.createElement(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      style: {\n        display: \"block\"\n      },\n      ref: this.saveSvgRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, title, timeAxis, rows, rowTitles, tracker);\n  }\n\n}\nChartContainer.propTypes = {\n  /**\r\n   * A [Pond TimeRange](https://esnet-pondjs.appspot.com/#/timerange) representing the\r\n   * begin and end time of the chart.\r\n   */\n  timeRange: PropTypes.instanceOf(TimeRange).isRequired,\n\n  /**\r\n   * Should the time axis use a UTC scale or local\r\n   */\n  utc: PropTypes.bool,\n\n  /**\r\n   * Children of the ChartContainer should be ChartRows.\r\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]).isRequired,\n\n  /**\r\n   * The width of the chart. This library also includes a <Resizable> component\r\n   * that can be wrapped around a \\<ChartContainer\\>. The purpose of this is to\r\n   * inject a width prop into the ChartContainer so that it will fit the\r\n   * surrounding element. This is very handy when you need the chart to resize\r\n   * based on a responsive layout.\r\n   */\n  width: PropTypes.number,\n\n  /**\r\n   * Constrain the timerange to not move back in time further than this Date.\r\n   */\n  minTime: PropTypes.instanceOf(Date),\n\n  /**\r\n   * Constrain the timerange to not move forward in time than this Date. A\r\n   * common example is setting this to the current time or the end time\r\n   * of a fixed set of data.\r\n   */\n  maxTime: PropTypes.instanceOf(Date),\n\n  /**\r\n   * Boolean to turn on interactive pan and zoom behavior for the chart.\r\n   */\n  enablePanZoom: PropTypes.bool,\n\n  /**\r\n   * Boolean to turn on interactive drag to zoom behavior for the chart.\r\n   */\n  enableDragZoom: PropTypes.bool,\n\n  /**\r\n   * If this is set the timerange of the chart cannot be zoomed in further\r\n   * than this duration, in milliseconds. This might be determined by the\r\n   * resolution of your data.\r\n   */\n  minDuration: PropTypes.number,\n\n  /**\r\n   * Provides several options as to the format of the time axis labels.\r\n   *\r\n   * In general the time axis will generate an appropriate time scale based\r\n   * on the timeRange prop and there is no need to set this.\r\n   *\r\n   * However, some options exist:\r\n   *\r\n   *  - setting format to \"day\", \"month\" or \"year\" will show only ticks on those,\r\n   * and every one of those intervals. For example maybe you are showing a bar\r\n   * chart for October 2014 then setting the format to \"day\" will insure that a\r\n   * label is placed for each and every day\r\n   *\r\n   *  - setting format to \"relative\" interprets the time as a duration. This\r\n   * is good for data that is specified relative to its start time, rather than\r\n   * as an actual date/time\r\n   *\r\n   *  - setting the format to a d3 format string will use that format\r\n   *\r\n   *  - supplying a function for format will cause that function to be called\r\n   * whenever rendering a time\r\n   */\n  format: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\r\n   * Time in milliseconds to transition from one Y-scale to the next\r\n   */\n  transition: PropTypes.number,\n\n  /**\r\n   * Show grid lines for each time marker\r\n   */\n  showGrid: PropTypes.bool,\n\n  /**\r\n   * Defines whether grid is overlayed (\"over\"( or underlayed (\"under\")\r\n   * with respect to the charts\r\n   */\n  showGridPosition: PropTypes.oneOf([\"over\", \"under\"]),\n\n  /**\r\n   * Defines how to style the SVG\r\n   */\n  style: PropTypes.object,\n\n  /**\r\n   * The width of the tracker info box\r\n   */\n  trackerHintWidth: PropTypes.number,\n\n  /**\r\n   * The height of the tracker info box\r\n   */\n  trackerHintHeight: PropTypes.number,\n\n  /**\r\n   * Info box value or values to place next to the tracker line.\r\n   * This is either an array of objects, with each object\r\n   * specifying the label and value to be shown in the info box,\r\n   * or a simple string label.\r\n   */\n  trackerValues: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string\n  }))]),\n\n  /**\r\n   * A Date specifying the position of the tracker line on the chart. It is\r\n   * common to take this from the onTrackerChanged callback so that the tracker\r\n   * followers the user's cursor, but it could be modified to snap to a point or\r\n   * to the nearest minute, for example.\r\n   */\n  trackerPosition: PropTypes.instanceOf(Date),\n\n  /**\r\n   * The style of the time marker. This is an object of the form { line, box, dot }.\r\n   * Line, box and dot are themselves objects representing inline CSS for each of\r\n   * the pieces of the info marker.\r\n   *\r\n   * When we use the TimeMarker as a tracker, we can style the box and dot as well.\r\n   */\n  trackerStyle: PropTypes.shape({\n    label: PropTypes.object,\n    // eslint-disable-line\n    line: PropTypes.object,\n    // eslint-disable-line\n    box: PropTypes.object,\n    // eslint-disable-line\n    dot: PropTypes.object // eslint-disable-line\n\n  }),\n\n  /**\r\n   * Will be called when the user hovers over a chart. The callback will\r\n   * be called with the timestamp (a Date object) of the position hovered\r\n   * over as well as the current time axis' time scale. The timestamp may\r\n   * be used as the trackerPosition (see above), or to provide information\r\n   * about the time hovered over within the greater page. The time scale\r\n   * may be used to translate the timestamp into an x coordinate, which\r\n   * can then be used to position arbitrary components in sync with the\r\n   * current tracker position.\r\n   * Commonly we might do something like this:\r\n   * ```\r\n   *   <ChartContainer\r\n   *     onTrackerChanged={(tracker) => this.setState({tracker})}\r\n   *     trackerPosition={this.state.tracker}\r\n   *     ... />\r\n   * ```\r\n   */\n  onTrackerChanged: PropTypes.func,\n\n  /**\r\n   * This will be called if the user pans and/or zooms the chart. The callback\r\n   * will be called with the new TimeRange. This can be fed into the timeRange\r\n   * prop as well as used elsewhere on the greater page. Typical use might look\r\n   * like this:\r\n   * ```\r\n   *   <ChartContainer\r\n   *     onTimeRangeChanged={(timerange) => this.setState({timerange})}\r\n   *     timeRange={this.state.timerange}\r\n   *     ... />\r\n   * ```\r\n   */\n  onTimeRangeChanged: PropTypes.func,\n\n  /**\r\n   * Called when the size of the chart changes\r\n   */\n  onChartResize: PropTypes.func,\n\n  /**\r\n   * Called when the user clicks the background plane of the chart. This is\r\n   * useful when deselecting elements.\r\n   */\n  onBackgroundClick: PropTypes.func,\n\n  /**\r\n   * Called when the user context-clicks the chart\r\n   */\n  onContextMenu: PropTypes.func,\n\n  /**\r\n   * Props for handling the padding\r\n   */\n  padding: PropTypes.number,\n  paddingLeft: PropTypes.number,\n  paddingRight: PropTypes.number,\n  paddingTop: PropTypes.number,\n  paddingBottom: PropTypes.number,\n\n  /**\r\n   * Specify the title for the chart\r\n   */\n  title: PropTypes.string,\n\n  /**\r\n   * Specify the height of the title\r\n   * Default value is 28 pixels\r\n   */\n  titleHeight: PropTypes.number,\n\n  /**\r\n   * Specify the styling of the chart's title\r\n   */\n  titleStyle: PropTypes.object,\n\n  /**\r\n   * Object specifying the CSS by which the `TimeAxis` can be styled. The object can contain:\r\n   * \"values\" (the time labels), \"axis\" (the main horizontal line) and \"ticks\" (which may\r\n   * optionally extend the height of all chart rows using the `showGrid` prop. Each of these\r\n   * is an inline CSS style applied to the axis label, axis values, axis line and ticks\r\n   * respectively.\r\n   *\r\n   * Note that \"ticks\" and \"values\" are passed into d3's styles, so they are regular CSS property names\r\n   * and not React's camel case names (e.g. \"stroke-dasharray\" not \"strokeDasharray\"). \"axis\" is a\r\n   * regular React rendered SVG line, so it uses camel case.\r\n   */\n  timeAxisStyle: PropTypes.shape({\n    axis: PropTypes.object,\n    values: PropTypes.object,\n    ticks: PropTypes.object\n  }),\n\n  /**\r\n   * Height of the time axis\r\n   * Default value is 35 pixels\r\n   */\n  timeAxisHeight: PropTypes.number,\n\n  /**\r\n   * Specify the number of ticks\r\n   * The default ticks for quantitative scales are multiples of 2, 5 and 10.\r\n   * So, while you can use this prop to increase or decrease the tick count, it will always return multiples of 2, 5 and 10.\r\n   */\n  timeAxisTickCount: PropTypes.number,\n\n  /**\r\n   * Angle the time axis labels\r\n   */\n  timeAxisAngledLabels: PropTypes.bool,\n\n  /**\r\n   * Prop to hide time axis if required\r\n   */\n  hideTimeAxis: PropTypes.bool\n};\nChartContainer.defaultProps = {\n  width: 800,\n  padding: 0,\n  enablePanZoom: false,\n  enableDragZoom: false,\n  utc: false,\n  showGrid: false,\n  showGridPosition: \"over\",\n  timeAxisStyle: defaultTimeAxisStyle,\n  titleStyle: defaultTitleStyle,\n  trackerStyle: defaultTrackerStyle,\n  hideTimeAxis: false\n};","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\ChartContainer.js"],"names":["_","invariant","merge","React","PropTypes","scaleTime","scaleUtc","TimeRange","areComponentsEqual","Brush","MultiBrush","ChartRow","Charts","EventHandler","TimeAxis","TimeMarker","Label","defaultTimeAxisStyle","axis","fill","stroke","pointerEvents","defaultTitleStyle","fontWeight","fontSize","font","defaultChartRowTitleLabelStyle","defaultChartRowTitleBoxStyle","defaultTrackerStyle","line","cursor","box","opacity","dot","ChartContainer","Component","constructor","props","alert","handleTrackerChanged","bind","handleTimeRangeChanged","handleMouseMove","handleMouseOut","handleContextMenu","handleBackgroundClick","handleZoom","saveSvgRef","t","onTrackerChanged","timeScale","leftWidth","timerange","onTimeRangeChanged","x","y","invert","onMouseMove","e","onContextMenu","scale","onBackgroundClick","c","svg","render","padding","paddingLeft","paddingRight","paddingTop","paddingBottom","titleHeight","isUndefined","title","chartRows","chartRowTitles","leftAxisWidths","rightAxisWidths","Children","forEach","children","childRow","type","countLeft","countCharts","align","child","msg","name","pos","width","Number","visible","has","Math","max","reduce","a","b","rightWidth","timeAxisHeight","hideTimeAxis","timeAxisWidth","timeRange","Error","utc","domain","toJSON","range","chartsWidth","i","yPosition","transform","titleStyle","label","trackerStyle","chartsHeight","chartRow","rowKey","firstRow","isVisible","minTime","maxTime","transition","enablePanZoom","minDuration","showGrid","timeFormat","format","trackerShowTime","trackerTime","trackerPosition","trackerTimeFormat","push","cloneElement","rowTitleKey","titleLabelStyle","titleBoxStyle","titleTransform","height","parseInt","tracker","contains","trackerValues","trackerHintWidth","trackerHintHeight","timeAxisStyle","display","timeAxis","timeAxisAngledLabels","timeAxisTickCount","rows","enableDragZoom","rowTitles","svgWidth","svgHeight","svgStyle","style","showGridPosition","propTypes","instanceOf","isRequired","bool","oneOfType","arrayOf","element","number","Date","string","func","oneOf","object","shape","value","onChartResize","values","ticks","defaultProps"],"mappings":"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","sourcesContent":["/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport invariant from \"invariant\";\r\nimport merge from \"merge\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { scaleTime, scaleUtc } from \"d3-scale\";\r\nimport { TimeRange } from \"pondjs\";\r\nimport { areComponentsEqual } from \"react-hot-loader\";\r\n\r\nimport Brush from \"./Brush\";\r\nimport MultiBrush from \"./MultiBrush\";\r\nimport ChartRow from \"./ChartRow\";\r\nimport Charts from \"./Charts\";\r\nimport EventHandler from \"./EventHandler\";\r\nimport TimeAxis from \"./TimeAxis\";\r\nimport TimeMarker from \"./TimeMarker\";\r\nimport Label from \"./Label\";\r\n\r\nconst defaultTimeAxisStyle = {\r\n  axis: {\r\n    fill: \"none\",\r\n    stroke: \"#C0C0C0\",\r\n    pointerEvents: \"none\"\r\n  }\r\n};\r\n\r\nconst defaultTitleStyle = {\r\n  fontWeight: 100,\r\n  fontSize: 14,\r\n  font: '\"Goudy Bookletter 1911\", sans-serif\"',\r\n  fill: \"#C0C0C0\"\r\n};\r\n\r\nconst defaultChartRowTitleLabelStyle = {\r\n  fontWeight: 100,\r\n  fontSize: 13,\r\n  font: '\"Goudy Bookletter 1911\", sans-serif\"',\r\n  fill: \"#000\"\r\n};\r\n\r\nconst defaultChartRowTitleBoxStyle = {\r\n  fill: \"white\",\r\n  stroke: \"none\"\r\n};\r\n\r\nconst defaultTrackerStyle = {\r\n  line: {\r\n    stroke: \"#999\",\r\n    cursor: \"crosshair\",\r\n    pointerEvents: \"none\"\r\n  },\r\n  box: {\r\n    fill: \"white\",\r\n    opacity: 0.9,\r\n    stroke: \"#999\",\r\n    pointerEvents: \"none\"\r\n  },\r\n  dot: {\r\n    fill: \"#999\"\r\n  }\r\n};\r\n\r\n/**\r\n * The `<ChartContainer>` is the outer most element of a chart and is\r\n * responsible for generating and arranging its sub-elements. Specifically,\r\n * it is a container for one or more `<ChartRows>` (each of which contains\r\n * charts, axes etc) and in addition it manages the overall time range of\r\n * the chart and so also is responsible for the time axis, which is always\r\n * shared by all the rows.\r\n *\r\n * Here is an example:\r\n *\r\n * ```xml\r\n * <ChartContainer timeRange={audSeries.timerange()} width=\"800\">\r\n *     <ChartRow>\r\n *         ...\r\n *     </ChartRow>\r\n *     <ChartRow>\r\n *         ...\r\n *     </ChartRow>\r\n * </ChartContainer>\r\n * ```\r\n */\r\nexport default class ChartContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    alert(0);\r\n    this.handleTrackerChanged = this.handleTrackerChanged.bind(this);\r\n    this.handleTimeRangeChanged = this.handleTimeRangeChanged.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.handleMouseOut = this.handleMouseOut.bind(this);\r\n    this.handleContextMenu = this.handleContextMenu.bind(this);\r\n    this.handleBackgroundClick = this.handleBackgroundClick.bind(this);\r\n    this.handleZoom = this.handleZoom.bind(this);\r\n    this.saveSvgRef = this.saveSvgRef.bind(this);\r\n  }\r\n\r\n  //\r\n  // Event handlers\r\n  //\r\n\r\n  handleTrackerChanged(t) {\r\n    if (this.props.onTrackerChanged) {\r\n      this.props.onTrackerChanged(\r\n        t,\r\n        // Adjust the scaled time so that the result\r\n        // is the true x position relative to the whole chart\r\n        t => this.timeScale(t) + this.leftWidth\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Within the charts library the time range of the x axis is kept as a begin\r\n   * and end time (Javascript Date objects). But the interface is Pond based,\r\n   * so this callback returns a Pond TimeRange.\r\n   */\r\n  handleTimeRangeChanged(timerange) {\r\n    if (this.props.onTimeRangeChanged) {\r\n      this.props.onTimeRangeChanged(timerange);\r\n    }\r\n  }\r\n\r\n  handleMouseMove(x, y) {\r\n    this.handleTrackerChanged(this.timeScale.invert(x));\r\n    if (this.props.onMouseMove) {\r\n      this.props.onMouseMove(x, y);\r\n    }\r\n  }\r\n\r\n  handleMouseOut(e) {\r\n    this.handleTrackerChanged(null);\r\n  }\r\n\r\n  handleContextMenu(x, y) {\r\n    if (this.props.onContextMenu) {\r\n      const t = this.props.scale\r\n        ? this.props.scale.invert(x)\r\n        : this.timeScale.invert(x);\r\n      this.props.onContextMenu(x, y, t);\r\n    }\r\n  }\r\n\r\n  handleBackgroundClick(x, y) {\r\n    if (this.props.onBackgroundClick) {\r\n      const t = this.props.scale\r\n        ? this.props.scale.invert(x)\r\n        : this.timeScale.invert(x);\r\n      this.props.onBackgroundClick(x, y, t);\r\n    }\r\n  }\r\n\r\n  handleZoom(timerange) {\r\n    if (this.props.onTimeRangeChanged) {\r\n      this.props.onTimeRangeChanged(timerange);\r\n    }\r\n  }\r\n\r\n  saveSvgRef(c) {\r\n    this.svg = c;\r\n  }\r\n\r\n  //\r\n  // Render\r\n  //\r\n\r\n  render() {\r\n    const { padding = 0 } = this.props;\r\n    const { paddingLeft = padding, paddingRight = padding } = this.props;\r\n    const { paddingTop = padding, paddingBottom = padding } = this.props;\r\n\r\n    let { titleHeight = 28 } = this.props;\r\n    if (_.isUndefined(this.props.title)) {\r\n      titleHeight = 0;\r\n    }\r\n\r\n    const chartRows = [];\r\n    const chartRowTitles = [];\r\n    const leftAxisWidths = [];\r\n    const rightAxisWidths = [];\r\n\r\n    //\r\n    // How much room does the axes of all the charts take up on the right\r\n    // and left. The result is an array for left and right axis which\r\n    // contain the min column width needed to hold the axes widths at the\r\n    // pos for all rows.\r\n    //\r\n    // pos   1      0        <charts>     0        1        2\r\n    //     | Axis | Axis |   CHARTS    |  Axis  |                      Row 1\r\n    //            | Axis |   CHARTS    |  Axis  |  Axis  |  Axis |     Row 2\r\n    //     ...............              ..........................\r\n    //          left cols              right cols\r\n    //\r\n\r\n    React.Children.forEach(this.props.children, childRow => {\r\n      if (areComponentsEqual(childRow.type, ChartRow)) {\r\n        //\r\n        // Within this row, count the number of columns that will be\r\n        // left and right of the Charts tag, as well as the total number\r\n        // of Charts tags for error handling\r\n        //\r\n        let countLeft = 0;\r\n        let countCharts = 0;\r\n\r\n        let align = \"left\";\r\n\r\n        React.Children.forEach(childRow.props.children, child => {\r\n          if (child === null) return;\r\n          if (areComponentsEqual(child.type, Charts)) {\r\n            countCharts += 1;\r\n            align = \"right\";\r\n          } else if (\r\n            !areComponentsEqual(child.type, Brush) &&\r\n            !areComponentsEqual(child.type, MultiBrush)\r\n          ) {\r\n            if (align === \"left\") {\r\n              countLeft += 1;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (countCharts !== 1) {\r\n          const msg =\r\n            \"ChartRow should have one and only one <Charts> tag within it\";\r\n          invariant(false, msg, childRow.constructor.name);\r\n        }\r\n\r\n        align = \"left\";\r\n        let pos = countLeft - 1;\r\n\r\n        React.Children.forEach(childRow.props.children, child => {\r\n          if (child === null) return;\r\n          if (\r\n            areComponentsEqual(child.type, Charts) ||\r\n            areComponentsEqual(child.type, Brush) ||\r\n            areComponentsEqual(child.type, MultiBrush)\r\n          ) {\r\n            if (areComponentsEqual(child.type, Charts)) {\r\n              align = \"right\";\r\n              pos = 0;\r\n            }\r\n          } else {\r\n            let width = Number(child.props.width) || 40;\r\n            const visible =\r\n              !_.has(child.props, \"visible\") || child.props.visible;\r\n            if (!visible) width = 0;\r\n\r\n            if (align === \"left\") {\r\n              leftAxisWidths[pos] = leftAxisWidths[pos]\r\n                ? Math.max(width, leftAxisWidths[pos])\r\n                : width;\r\n              pos -= 1;\r\n            } else if (align === \"right\") {\r\n              rightAxisWidths[pos] = rightAxisWidths[pos]\r\n                ? Math.max(width, rightAxisWidths[pos])\r\n                : width;\r\n              pos += 1;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Space used by columns on left and right of charts\r\n    const leftWidth = (this.leftWidth = _.reduce(\r\n      leftAxisWidths,\r\n      (a, b) => a + b,\r\n      0\r\n    ));\r\n    const rightWidth = (this.rightWidth = _.reduce(\r\n      rightAxisWidths,\r\n      (a, b) => a + b,\r\n      0\r\n    ));\r\n\r\n    //\r\n    // Time scale\r\n    //\r\n\r\n    let { timeAxisHeight = 35 } = this.props;\r\n    if (this.props.hideTimeAxis) {\r\n      timeAxisHeight = 0;\r\n    }\r\n\r\n    const timeAxisWidth =\r\n      this.props.width - leftWidth - rightWidth - paddingLeft - paddingRight;\r\n\r\n    if (!this.props.timeRange) {\r\n      throw Error(\"Invalid timerange passed to ChartContainer\");\r\n    }\r\n\r\n    const timeScale = (this.timeScale = this.props.utc\r\n      ? scaleUtc()\r\n          .domain(this.props.timeRange.toJSON())\r\n          .range([0, timeAxisWidth])\r\n      : scaleTime()\r\n          .domain(this.props.timeRange.toJSON())\r\n          .range([0, timeAxisWidth]));\r\n\r\n    const chartsWidth =\r\n      this.props.width - leftWidth - rightWidth - paddingLeft - paddingRight;\r\n\r\n    let i = 0;\r\n    let yPosition = paddingTop;\r\n\r\n    // Chart title\r\n    const transform = `translate(${leftWidth + paddingLeft},${yPosition})`;\r\n    const titleStyle = merge(\r\n      true,\r\n      defaultTitleStyle,\r\n      this.props.titleStyle ? this.props.titleStyle : {}\r\n    );\r\n    const title = this.props.title ? (\r\n      <g transform={transform}>\r\n        <Label\r\n          align=\"center\"\r\n          label={this.props.title}\r\n          style={{ label: titleStyle, box: { fill: \"none\", stroke: \"none\" } }}\r\n          width={chartsWidth}\r\n          height={titleHeight}\r\n        />\r\n      </g>\r\n    ) : (\r\n      <g />\r\n    );\r\n\r\n    const trackerStyle = merge(\r\n      true,\r\n      defaultTrackerStyle,\r\n      this.props.trackerStyle ? this.props.trackerStyle : {}\r\n    );\r\n\r\n    //yPosition += titleHeight;\r\n    let chartsHeight = 0;\r\n    React.Children.forEach(this.props.children, child => {\r\n      if (areComponentsEqual(child.type, ChartRow)) {\r\n        const chartRow = child;\r\n        const rowKey = `chart-row-row-${i}`;\r\n        const firstRow = i === 0;\r\n        const isVisible = child.props.visible;\r\n        const props = {\r\n          timeScale,\r\n          paddingLeft,\r\n          paddingRight,\r\n          leftAxisWidths,\r\n          rightAxisWidths,\r\n          width: this.props.width,\r\n          minTime: this.props.minTime,\r\n          maxTime: this.props.maxTime,\r\n          transition: this.props.transition,\r\n          enablePanZoom: this.props.enablePanZoom,\r\n          minDuration: this.props.minDuration,\r\n          showGrid: this.props.showGrid,\r\n          timeFormat: this.props.format,\r\n          trackerShowTime: firstRow,\r\n          trackerTime: this.props.trackerPosition,\r\n          trackerTimeFormat: this.props.format,\r\n          trackerStyle: trackerStyle,\r\n          onTimeRangeChanged: this.handleTimeRangeChanged,\r\n          onTrackerChanged: this.handleTrackerChanged\r\n        };\r\n\r\n        let { titleHeight = 28 } = child.props;\r\n        if (_.isUndefined(child.props.title)) {\r\n          titleHeight = 0;\r\n        }\r\n\r\n        const transform = `translate(${-leftWidth - paddingLeft},${yPosition +\r\n          titleHeight})`;\r\n        if (isVisible) {\r\n          chartRows.push(\r\n            <g transform={transform} key={rowKey}>\r\n              {React.cloneElement(chartRow, props)}\r\n            </g>\r\n          );\r\n\r\n          if (!_.isUndefined(child.props.title)) {\r\n            const rowTitleKey = `chart-row-row-title-${i}`;\r\n\r\n            const titleLabelStyle = merge(\r\n              true,\r\n              defaultChartRowTitleLabelStyle,\r\n              child.props.titleStyle ? child.props.titleStyle : {}\r\n            );\r\n            const titleBoxStyle = merge(\r\n              true,\r\n              defaultChartRowTitleBoxStyle,\r\n              child.props.titleBoxStyle ? child.props.titleBoxStyle : {}\r\n            );\r\n            const titleTransform = `translate(${-leftWidth -\r\n              paddingLeft},${yPosition})`;\r\n            const title = (\r\n              <g transform={titleTransform} key={rowTitleKey}>\r\n                <Label\r\n                  align=\"left\"\r\n                  label={child.props.title}\r\n                  style={{\r\n                    label: titleLabelStyle,\r\n                    box: titleBoxStyle\r\n                  }}\r\n                  width={props.width}\r\n                  height={titleHeight}\r\n                />\r\n              </g>\r\n            );\r\n\r\n            chartRowTitles.push(title);\r\n          }\r\n\r\n          const height = parseInt(child.props.height, 10) + titleHeight;\r\n          yPosition += height;\r\n          chartsHeight += height;\r\n        }\r\n      }\r\n      i += 1;\r\n    });\r\n\r\n    // Hover tracker line\r\n    let tracker;\r\n    if (\r\n      this.props.trackerPosition &&\r\n      this.props.timeRange.contains(this.props.trackerPosition)\r\n    ) {\r\n      tracker = (\r\n        <g\r\n          key=\"tracker-group\"\r\n          style={{ pointerEvents: \"none\" }}\r\n          transform={`translate(${leftWidth + paddingLeft},${paddingTop +\r\n            titleHeight})`}\r\n        >\r\n          <TimeMarker\r\n            width={chartsWidth}\r\n            height={chartsHeight}\r\n            showInfoBox={!!this.props.trackerValues}\r\n            time={this.props.trackerPosition}\r\n            timeScale={timeScale}\r\n            timeFormat={this.props.format}\r\n            infoWidth={this.props.trackerHintWidth}\r\n            infoHeight={this.props.trackerHintHeight}\r\n            infoValues={this.props.trackerValues}\r\n            infoStyle={trackerStyle}\r\n          />\r\n        </g>\r\n      );\r\n    }\r\n\r\n    //\r\n    // TimeAxis\r\n    //\r\n\r\n    let timeAxisStyle;\r\n    if (this.props.hideTimeAxis) {\r\n      timeAxisStyle = {\r\n        axis: {\r\n          display: \"none\"\r\n        }\r\n      };\r\n    } else {\r\n      timeAxisStyle = merge(\r\n        true,\r\n        defaultTimeAxisStyle.axis,\r\n        this.props.timeAxisStyle.axis ? this.props.timeAxisStyle.axis : {}\r\n      );\r\n    }\r\n\r\n    const timeAxis = (\r\n      <g\r\n        transform={`translate(${leftWidth + paddingLeft},${paddingTop +\r\n          titleHeight +\r\n          chartsHeight})`}\r\n      >\r\n        <line\r\n          x1={-leftWidth}\r\n          y1={0.5}\r\n          x2={chartsWidth + rightWidth}\r\n          y2={0.5}\r\n          style={timeAxisStyle}\r\n        />\r\n        <TimeAxis\r\n          scale={timeScale}\r\n          utc={this.props.utc}\r\n          angled={this.props.timeAxisAngledLabels}\r\n          style={this.props.timeAxisStyle}\r\n          format={this.props.format}\r\n          showGrid={this.props.showGrid}\r\n          gridHeight={chartsHeight}\r\n          tickCount={this.props.timeAxisTickCount}\r\n        />\r\n      </g>\r\n    );\r\n\r\n    //\r\n    // Event handler\r\n    //\r\n\r\n    const rows = (\r\n      <g\r\n        transform={`translate(${leftWidth + paddingLeft},${paddingTop +\r\n          titleHeight})`}\r\n      >\r\n        <EventHandler\r\n          key=\"event-handler\"\r\n          width={chartsWidth}\r\n          height={chartsHeight + timeAxisHeight}\r\n          scale={timeScale}\r\n          enablePanZoom={this.props.enablePanZoom}\r\n          enableDragZoom={this.props.enableDragZoom}\r\n          minDuration={this.props.minDuration}\r\n          minTime={this.props.minTime}\r\n          maxTime={this.props.maxTime}\r\n          onMouseOut={this.handleMouseOut}\r\n          onMouseMove={this.handleMouseMove}\r\n          onMouseClick={this.handleBackgroundClick}\r\n          onContextMenu={this.handleContextMenu}\r\n          onZoom={this.handleZoom}\r\n        >\r\n          {chartRows}\r\n        </EventHandler>\r\n      </g>\r\n    );\r\n\r\n    const rowTitles = (\r\n      <g\r\n        transform={`translate(${leftWidth + paddingLeft},${paddingTop +\r\n          titleHeight})`}\r\n      >\r\n        {chartRowTitles}\r\n      </g>\r\n    );\r\n\r\n    //\r\n    // Final render of the ChartContainer is composed of a number of\r\n    // chartRows, a timeAxis and the tracker indicator\r\n    //\r\n\r\n    const svgWidth = this.props.width;\r\n    const svgHeight =\r\n      chartsHeight + timeAxisHeight + paddingTop + paddingBottom + titleHeight;\r\n\r\n    const svgStyle = merge(\r\n      true,\r\n      { display: \"block\" },\r\n      this.props.style ? this.props.style : {}\r\n    );\r\n\r\n    return this.props.showGridPosition === \"over\" ? (\r\n      <svg\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n        style={svgStyle}\r\n        ref={this.saveSvgRef}\r\n      >\r\n        {title}\r\n        {rows}\r\n        {tracker}\r\n        {timeAxis}\r\n        {rowTitles}\r\n      </svg>\r\n    ) : (\r\n      <svg\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n        style={{ display: \"block\" }}\r\n        ref={this.saveSvgRef}\r\n      >\r\n        {title}\r\n        {timeAxis}\r\n        {rows}\r\n        {rowTitles}\r\n        {tracker}\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nChartContainer.propTypes = {\r\n  /**\r\n   * A [Pond TimeRange](https://esnet-pondjs.appspot.com/#/timerange) representing the\r\n   * begin and end time of the chart.\r\n   */\r\n  timeRange: PropTypes.instanceOf(TimeRange).isRequired,\r\n\r\n  /**\r\n   * Should the time axis use a UTC scale or local\r\n   */\r\n  utc: PropTypes.bool,\r\n\r\n  /**\r\n   * Children of the ChartContainer should be ChartRows.\r\n   */\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.element),\r\n    PropTypes.element\r\n  ]).isRequired,\r\n\r\n  /**\r\n   * The width of the chart. This library also includes a <Resizable> component\r\n   * that can be wrapped around a \\<ChartContainer\\>. The purpose of this is to\r\n   * inject a width prop into the ChartContainer so that it will fit the\r\n   * surrounding element. This is very handy when you need the chart to resize\r\n   * based on a responsive layout.\r\n   */\r\n  width: PropTypes.number,\r\n\r\n  /**\r\n   * Constrain the timerange to not move back in time further than this Date.\r\n   */\r\n  minTime: PropTypes.instanceOf(Date),\r\n\r\n  /**\r\n   * Constrain the timerange to not move forward in time than this Date. A\r\n   * common example is setting this to the current time or the end time\r\n   * of a fixed set of data.\r\n   */\r\n  maxTime: PropTypes.instanceOf(Date),\r\n\r\n  /**\r\n   * Boolean to turn on interactive pan and zoom behavior for the chart.\r\n   */\r\n  enablePanZoom: PropTypes.bool,\r\n\r\n  /**\r\n   * Boolean to turn on interactive drag to zoom behavior for the chart.\r\n   */\r\n  enableDragZoom: PropTypes.bool,\r\n\r\n  /**\r\n   * If this is set the timerange of the chart cannot be zoomed in further\r\n   * than this duration, in milliseconds. This might be determined by the\r\n   * resolution of your data.\r\n   */\r\n  minDuration: PropTypes.number,\r\n\r\n  /**\r\n   * Provides several options as to the format of the time axis labels.\r\n   *\r\n   * In general the time axis will generate an appropriate time scale based\r\n   * on the timeRange prop and there is no need to set this.\r\n   *\r\n   * However, some options exist:\r\n   *\r\n   *  - setting format to \"day\", \"month\" or \"year\" will show only ticks on those,\r\n   * and every one of those intervals. For example maybe you are showing a bar\r\n   * chart for October 2014 then setting the format to \"day\" will insure that a\r\n   * label is placed for each and every day\r\n   *\r\n   *  - setting format to \"relative\" interprets the time as a duration. This\r\n   * is good for data that is specified relative to its start time, rather than\r\n   * as an actual date/time\r\n   *\r\n   *  - setting the format to a d3 format string will use that format\r\n   *\r\n   *  - supplying a function for format will cause that function to be called\r\n   * whenever rendering a time\r\n   */\r\n  format: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n\r\n  /**\r\n   * Time in milliseconds to transition from one Y-scale to the next\r\n   */\r\n  transition: PropTypes.number,\r\n\r\n  /**\r\n   * Show grid lines for each time marker\r\n   */\r\n  showGrid: PropTypes.bool,\r\n\r\n  /**\r\n   * Defines whether grid is overlayed (\"over\"( or underlayed (\"under\")\r\n   * with respect to the charts\r\n   */\r\n  showGridPosition: PropTypes.oneOf([\"over\", \"under\"]),\r\n\r\n  /**\r\n   * Defines how to style the SVG\r\n   */\r\n  style: PropTypes.object,\r\n\r\n  /**\r\n   * The width of the tracker info box\r\n   */\r\n  trackerHintWidth: PropTypes.number,\r\n\r\n  /**\r\n   * The height of the tracker info box\r\n   */\r\n  trackerHintHeight: PropTypes.number,\r\n\r\n  /**\r\n   * Info box value or values to place next to the tracker line.\r\n   * This is either an array of objects, with each object\r\n   * specifying the label and value to be shown in the info box,\r\n   * or a simple string label.\r\n   */\r\n  trackerValues: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        label: PropTypes.string,\r\n        value: PropTypes.string\r\n      })\r\n    )\r\n  ]),\r\n\r\n  /**\r\n   * A Date specifying the position of the tracker line on the chart. It is\r\n   * common to take this from the onTrackerChanged callback so that the tracker\r\n   * followers the user's cursor, but it could be modified to snap to a point or\r\n   * to the nearest minute, for example.\r\n   */\r\n  trackerPosition: PropTypes.instanceOf(Date),\r\n\r\n  /**\r\n   * The style of the time marker. This is an object of the form { line, box, dot }.\r\n   * Line, box and dot are themselves objects representing inline CSS for each of\r\n   * the pieces of the info marker.\r\n   *\r\n   * When we use the TimeMarker as a tracker, we can style the box and dot as well.\r\n   */\r\n  trackerStyle: PropTypes.shape({\r\n    label: PropTypes.object, // eslint-disable-line\r\n    line: PropTypes.object, // eslint-disable-line\r\n    box: PropTypes.object, // eslint-disable-line\r\n    dot: PropTypes.object // eslint-disable-line\r\n  }),\r\n\r\n  /**\r\n   * Will be called when the user hovers over a chart. The callback will\r\n   * be called with the timestamp (a Date object) of the position hovered\r\n   * over as well as the current time axis' time scale. The timestamp may\r\n   * be used as the trackerPosition (see above), or to provide information\r\n   * about the time hovered over within the greater page. The time scale\r\n   * may be used to translate the timestamp into an x coordinate, which\r\n   * can then be used to position arbitrary components in sync with the\r\n   * current tracker position.\r\n   * Commonly we might do something like this:\r\n   * ```\r\n   *   <ChartContainer\r\n   *     onTrackerChanged={(tracker) => this.setState({tracker})}\r\n   *     trackerPosition={this.state.tracker}\r\n   *     ... />\r\n   * ```\r\n   */\r\n  onTrackerChanged: PropTypes.func,\r\n\r\n  /**\r\n   * This will be called if the user pans and/or zooms the chart. The callback\r\n   * will be called with the new TimeRange. This can be fed into the timeRange\r\n   * prop as well as used elsewhere on the greater page. Typical use might look\r\n   * like this:\r\n   * ```\r\n   *   <ChartContainer\r\n   *     onTimeRangeChanged={(timerange) => this.setState({timerange})}\r\n   *     timeRange={this.state.timerange}\r\n   *     ... />\r\n   * ```\r\n   */\r\n  onTimeRangeChanged: PropTypes.func,\r\n\r\n  /**\r\n   * Called when the size of the chart changes\r\n   */\r\n  onChartResize: PropTypes.func,\r\n\r\n  /**\r\n   * Called when the user clicks the background plane of the chart. This is\r\n   * useful when deselecting elements.\r\n   */\r\n  onBackgroundClick: PropTypes.func,\r\n\r\n  /**\r\n   * Called when the user context-clicks the chart\r\n   */\r\n  onContextMenu: PropTypes.func,\r\n\r\n  /**\r\n   * Props for handling the padding\r\n   */\r\n  padding: PropTypes.number,\r\n  paddingLeft: PropTypes.number,\r\n  paddingRight: PropTypes.number,\r\n  paddingTop: PropTypes.number,\r\n  paddingBottom: PropTypes.number,\r\n\r\n  /**\r\n   * Specify the title for the chart\r\n   */\r\n  title: PropTypes.string,\r\n\r\n  /**\r\n   * Specify the height of the title\r\n   * Default value is 28 pixels\r\n   */\r\n  titleHeight: PropTypes.number,\r\n\r\n  /**\r\n   * Specify the styling of the chart's title\r\n   */\r\n  titleStyle: PropTypes.object,\r\n\r\n  /**\r\n   * Object specifying the CSS by which the `TimeAxis` can be styled. The object can contain:\r\n   * \"values\" (the time labels), \"axis\" (the main horizontal line) and \"ticks\" (which may\r\n   * optionally extend the height of all chart rows using the `showGrid` prop. Each of these\r\n   * is an inline CSS style applied to the axis label, axis values, axis line and ticks\r\n   * respectively.\r\n   *\r\n   * Note that \"ticks\" and \"values\" are passed into d3's styles, so they are regular CSS property names\r\n   * and not React's camel case names (e.g. \"stroke-dasharray\" not \"strokeDasharray\"). \"axis\" is a\r\n   * regular React rendered SVG line, so it uses camel case.\r\n   */\r\n  timeAxisStyle: PropTypes.shape({\r\n    axis: PropTypes.object,\r\n    values: PropTypes.object,\r\n    ticks: PropTypes.object\r\n  }),\r\n\r\n  /**\r\n   * Height of the time axis\r\n   * Default value is 35 pixels\r\n   */\r\n  timeAxisHeight: PropTypes.number,\r\n\r\n  /**\r\n   * Specify the number of ticks\r\n   * The default ticks for quantitative scales are multiples of 2, 5 and 10.\r\n   * So, while you can use this prop to increase or decrease the tick count, it will always return multiples of 2, 5 and 10.\r\n   */\r\n  timeAxisTickCount: PropTypes.number,\r\n\r\n  /**\r\n   * Angle the time axis labels\r\n   */\r\n  timeAxisAngledLabels: PropTypes.bool,\r\n\r\n  /**\r\n   * Prop to hide time axis if required\r\n   */\r\n  hideTimeAxis: PropTypes.bool\r\n};\r\n\r\nChartContainer.defaultProps = {\r\n  width: 800,\r\n  padding: 0,\r\n  enablePanZoom: false,\r\n  enableDragZoom: false,\r\n  utc: false,\r\n  showGrid: false,\r\n  showGridPosition: \"over\",\r\n  timeAxisStyle: defaultTimeAxisStyle,\r\n  titleStyle: defaultTitleStyle,\r\n  trackerStyle: defaultTrackerStyle,\r\n  hideTimeAxis: false\r\n};\r\n"]},"metadata":{},"sourceType":"module"}