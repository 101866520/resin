{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golde\\\\resin\\\\src\\\\ValueList.js\";\n\n/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport merge from \"merge\";\nconst defaultBoxStyle = {\n  fill: \"#FEFEFE\",\n  stroke: \"#DDD\",\n  opacity: 0.8\n};\nconst defaultTextStyle = {\n  fontSize: 11,\n  textAnchor: \"left\",\n  fill: \"#b0b0b0\",\n  pointerEvents: \"none\"\n};\nconst defaultTextStyleCentered = {\n  fontSize: 11,\n  textAnchor: \"middle\",\n  fill: \"#bdbdbd\",\n  pointerEvents: \"none\"\n};\n\nfunction mergeStyles(style, isCentered) {\n  return {\n    boxStyle: merge(true, defaultBoxStyle, style.box ? style.box : {}),\n    labelStyle: merge(true, isCentered ? defaultTextStyleCentered : defaultTextStyle, style.label ? style.label : {})\n  };\n}\n/**\r\n * Renders a list of values in svg\r\n *\r\n *      +----------------+\r\n *      | Max 100 Gbps   |\r\n *      | Avg 26 Gbps    |\r\n *      +----------------+\r\n */\n\n\nconst ValueList = props => {\n  const align = props.align,\n        style = props.style,\n        width = props.width,\n        height = props.height;\n\n  const _mergeStyles = mergeStyles(style, align === \"center\"),\n        boxStyle = _mergeStyles.boxStyle,\n        labelStyle = _mergeStyles.labelStyle;\n\n  if (!props.values.length) {\n    return React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    });\n  }\n\n  const values = props.values.map((item, i) => {\n    if (align === \"left\") {\n      return React.createElement(\"g\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"text\", {\n        x: 10,\n        y: 5,\n        dy: \"\".concat((i + 1) * 1.2, \"em\"),\n        style: labelStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"tspan\", {\n        style: {\n          fontWeight: 700\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"\".concat(item.label, \": \")), React.createElement(\"tspan\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"\".concat(item.value))));\n    }\n\n    const posx = parseInt(props.width / 2, 10);\n    return React.createElement(\"g\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      x: posx,\n      y: 5,\n      dy: \"\".concat((i + 1) * 1.2, \"em\"),\n      style: labelStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"tspan\", {\n      style: {\n        fontWeight: 700\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"\".concat(item.label, \": \")), React.createElement(\"tspan\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"\".concat(item.value))));\n  });\n  const box = React.createElement(\"rect\", {\n    style: boxStyle,\n    x: 0,\n    y: 0,\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  });\n  return React.createElement(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, box, values);\n};\n\nValueList.defaultProps = {\n  align: \"center\",\n  width: 100,\n  height: 100,\n  pointerEvents: \"none\",\n  style: {\n    fill: \"#FEFEFE\",\n    stroke: \"#DDD\",\n    opacity: 0.8\n  }\n};\nValueList.propTypes = {\n  /**\r\n   * Where to position the label, either \"left\" or \"center\" within the box\r\n   */\n  align: PropTypes.oneOf([\"center\", \"left\"]),\n\n  /**\r\n   * An array of label value pairs to render\r\n   */\n  values: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    // eslint-disable-line\n    value: PropTypes.oneOfType([// eslint-disable-line\n    PropTypes.number, PropTypes.string])\n  })).isRequired,\n\n  /**\r\n   * CSS object to be applied to the ValueList surrounding box and the label (text).\r\n   */\n  style: PropTypes.object,\n  // eslint-disable-line\n\n  /**\r\n   * The width of the rectangle to render into\r\n   */\n  width: PropTypes.number,\n\n  /**\r\n   * The height of the rectangle to render into\r\n   */\n  height: PropTypes.number\n};\nexport default ValueList;","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\ValueList.js"],"names":["React","PropTypes","merge","defaultBoxStyle","fill","stroke","opacity","defaultTextStyle","fontSize","textAnchor","pointerEvents","defaultTextStyleCentered","mergeStyles","style","isCentered","boxStyle","box","labelStyle","label","ValueList","props","align","width","height","values","length","map","item","i","fontWeight","value","posx","parseInt","defaultProps","propTypes","oneOf","arrayOf","shape","string","oneOfType","number","isRequired","object"],"mappings":"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","sourcesContent":["/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport merge from \"merge\";\r\n\r\nconst defaultBoxStyle = {\r\n    fill: \"#FEFEFE\",\r\n    stroke: \"#DDD\",\r\n    opacity: 0.8\r\n};\r\n\r\nconst defaultTextStyle = {\r\n    fontSize: 11,\r\n    textAnchor: \"left\",\r\n    fill: \"#b0b0b0\",\r\n    pointerEvents: \"none\"\r\n};\r\n\r\nconst defaultTextStyleCentered = {\r\n    fontSize: 11,\r\n    textAnchor: \"middle\",\r\n    fill: \"#bdbdbd\",\r\n    pointerEvents: \"none\"\r\n};\r\n\r\nfunction mergeStyles(style, isCentered) {\r\n    return {\r\n        boxStyle: merge(true, defaultBoxStyle, style.box ? style.box : {}),\r\n        labelStyle: merge(\r\n            true,\r\n            isCentered ? defaultTextStyleCentered : defaultTextStyle,\r\n            style.label ? style.label : {}\r\n        )\r\n    };\r\n}\r\n\r\n/**\r\n * Renders a list of values in svg\r\n *\r\n *      +----------------+\r\n *      | Max 100 Gbps   |\r\n *      | Avg 26 Gbps    |\r\n *      +----------------+\r\n */\r\nconst ValueList = props => {\r\n    const { align, style, width, height } = props;\r\n    const { boxStyle, labelStyle } = mergeStyles(style, align === \"center\");\r\n\r\n    if (!props.values.length) {\r\n        return <g />;\r\n    }\r\n\r\n    const values = props.values.map((item, i) => {\r\n        if (align === \"left\") {\r\n            return (\r\n                <g key={i}>\r\n                    <text x={10} y={5} dy={`${(i + 1) * 1.2}em`} style={labelStyle}>\r\n                        <tspan style={{ fontWeight: 700 }}>{`${item.label}: `}</tspan>\r\n                        <tspan>{`${item.value}`}</tspan>\r\n                    </text>\r\n                </g>\r\n            );\r\n        }\r\n\r\n        const posx = parseInt(props.width / 2, 10);\r\n        return (\r\n            <g key={i}>\r\n                <text x={posx} y={5} dy={`${(i + 1) * 1.2}em`} style={labelStyle}>\r\n                    <tspan style={{ fontWeight: 700 }}>{`${item.label}: `}</tspan>\r\n                    <tspan>{`${item.value}`}</tspan>\r\n                </text>\r\n            </g>\r\n        );\r\n    });\r\n\r\n    const box = <rect style={boxStyle} x={0} y={0} width={width} height={height} />;\r\n\r\n    return (\r\n        <g>\r\n            {box}\r\n            {values}\r\n        </g>\r\n    );\r\n};\r\n\r\nValueList.defaultProps = {\r\n    align: \"center\",\r\n    width: 100,\r\n    height: 100,\r\n    pointerEvents: \"none\",\r\n    style: { fill: \"#FEFEFE\", stroke: \"#DDD\", opacity: 0.8 }\r\n};\r\n\r\nValueList.propTypes = {\r\n    /**\r\n     * Where to position the label, either \"left\" or \"center\" within the box\r\n     */\r\n    align: PropTypes.oneOf([\"center\", \"left\"]),\r\n\r\n    /**\r\n     * An array of label value pairs to render\r\n     */\r\n    values: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            label: PropTypes.string, // eslint-disable-line\r\n            value: PropTypes.oneOfType([\r\n                // eslint-disable-line\r\n                PropTypes.number,\r\n                PropTypes.string\r\n            ])\r\n        })\r\n    ).isRequired,\r\n\r\n    /**\r\n     * CSS object to be applied to the ValueList surrounding box and the label (text).\r\n     */\r\n    style: PropTypes.object, // eslint-disable-line\r\n\r\n    /**\r\n     * The width of the rectangle to render into\r\n     */\r\n    width: PropTypes.number,\r\n\r\n    /**\r\n     * The height of the rectangle to render into\r\n     */\r\n    height: PropTypes.number\r\n};\r\n\r\nexport default ValueList;\r\n"]},"metadata":{},"sourceType":"module"}