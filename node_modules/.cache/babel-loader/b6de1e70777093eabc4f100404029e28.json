{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golde\\\\resin\\\\src\\\\TimeMarker.js\";\n\n/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport _ from \"underscore\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { timeFormat } from \"d3-time-format\";\nimport \"moment-duration-format\";\nimport ValueList from \"./ValueList\";\nimport Label from \"./Label\";\nexport default class TimeMarker extends React.Component {\n  renderLine(posx) {\n    return React.createElement(\"line\", {\n      style: this.props.infoStyle.line,\n      x1: posx,\n      y1: 0,\n      x2: posx,\n      y2: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n\n  renderTimeMarker(d) {\n    const textStyle = {\n      fontSize: 11,\n      textAnchor: \"left\",\n      fill: \"#bdbdbd\"\n    };\n    let dateStr = \"\".concat(d);\n\n    if (this.props.timeFormat === \"day\") {\n      const formatter = timeFormat(\"%d\");\n      dateStr = formatter(d);\n    } else if (this.props.timeFormat === \"month\") {\n      const formatter = timeFormat(\"%B\");\n      dateStr = formatter(d);\n    } else if (this.props.timeFormat === \"year\") {\n      const formatter = timeFormat(\"%Y\");\n      dateStr = formatter(d);\n    } else if (this.props.timeFormat === \"relative\") {\n      dateStr = moment.duration(+d).format();\n    } else if (_.isString(this.props.timeFormat)) {\n      const formatter = timeFormat(this.props.timeFormat);\n      dateStr = formatter(d);\n    } else if (_.isFunction(this.props.timeFormat)) {\n      dateStr = this.props.timeFormat(d);\n    }\n\n    return React.createElement(\"text\", {\n      x: 0,\n      y: 0,\n      dy: \"1.2em\",\n      style: textStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, dateStr);\n  }\n\n  renderInfoBox(posx) {\n    const w = this.props.infoWidth;\n    const infoBoxProps = {\n      align: \"left\",\n      style: {\n        box: this.props.infoStyle.box,\n        label: this.props.infoStyle.label\n      },\n      width: this.props.infoWidth,\n      height: this.props.infoHeight\n    };\n\n    if (this.props.infoValues) {\n      const infoBox = _.isString(this.props.infoValues) ? React.createElement(Label, Object.assign({}, infoBoxProps, {\n        label: this.props.infoValues,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })) : React.createElement(ValueList, Object.assign({}, infoBoxProps, {\n        values: this.props.infoValues,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n\n      if (posx + 10 + w < this.props.width - 50) {\n        return React.createElement(\"g\", {\n          transform: \"translate(\".concat(posx + 10, \",\", 5, \")\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, this.props.showTime ? this.renderTimeMarker(this.props.time) : null, React.createElement(\"g\", {\n          transform: \"translate(0,\".concat(this.props.showTime ? 20 : 0, \")\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, infoBox));\n      }\n\n      return React.createElement(\"g\", {\n        transform: \"translate(\".concat(posx - w - 10, \",\", 5, \")\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.props.showTime ? this.renderTimeMarker(this.props.time) : null, React.createElement(\"g\", {\n        transform: \"translate(0,\".concat(this.props.showTime ? 20 : 0, \")\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, infoBox));\n    }\n\n    return React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const posx = this.props.timeScale(this.props.time);\n\n    if (posx) {\n      return React.createElement(\"g\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.props.showLine ? this.renderLine(posx) : null, this.props.showInfoBox ? this.renderInfoBox(posx) : null);\n    }\n\n    return null;\n  }\n\n}\nTimeMarker.propTypes = {\n  /**\r\n   * Show or hide this chart\r\n   */\n  visible: PropTypes.bool,\n\n  /**\r\n   * The time, expressed as a Javascript `Date` object, to display the marker\r\n   */\n  time: PropTypes.instanceOf(Date),\n\n  /**\r\n   * The values to show in the info box. This is either an array of\r\n   * objects, with each object specifying the label and value\r\n   * to be shown in the info box, or a simple string label\r\n   */\n  infoValues: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    // eslint-disable-line\n    value: PropTypes.string // eslint-disable-line\n\n  }))]),\n\n  /**\r\n   * The style of the info box and connecting lines. This is an\r\n   * object of the form { line, box, dot }. Line, box and dot\r\n   * are themselves objects representing inline CSS for each of\r\n   * the pieces of the info marker.\r\n   */\n  infoStyle: PropTypes.shape({\n    line: PropTypes.object,\n    // eslint-disable-line\n    box: PropTypes.object,\n    // eslint-disable-line\n    dot: PropTypes.object // eslint-disable-line\n\n  }),\n\n  /**\r\n   * The width of the hover info box\r\n   */\n  infoWidth: PropTypes.number,\n\n  /**\r\n   * The height of the hover info box\r\n   */\n  infoHeight: PropTypes.number,\n\n  /**\r\n   * Display the info box at all. If you don't have any values to show and just\r\n   * want a line and a time (for example), you can set this to false.\r\n   */\n  showInfoBox: PropTypes.bool,\n\n  /**\r\n   * You can show the info box without the corresponding time marker. Why would\r\n   * you do this? I don't know. Actually, I do. You might use the ChartContainer\r\n   * tracker mechanism to show the line across multiple rows, then add a TimeMarker\r\n   * selectively to each row.\r\n   */\n  showLine: PropTypes.bool,\n\n  /**\r\n   * You can hide the time displayed above the info box. You might do this because\r\n   * it is already displayed elsewhere in your UI. Or maybe you just don't like it.\r\n   */\n  showTime: PropTypes.bool,\n\n  /**\r\n   * The time format used for display of the time above the info box.\r\n   */\n  timeFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\r\n   * [Internal] The timeScale supplied by the surrounding ChartContainer\r\n   */\n  timeScale: PropTypes.func,\n\n  /**\r\n   * [Internal] The width supplied by the surrounding ChartContainer\r\n   */\n  width: PropTypes.number,\n\n  /**\r\n   * [Internal] The height supplied by the surrounding ChartContainer\r\n   */\n  height: PropTypes.number\n};\nTimeMarker.defaultProps = {\n  visible: true,\n  showInfoBox: true,\n  showLine: true,\n  showTime: true,\n  infoStyle: {\n    line: {\n      stroke: \"#999\",\n      cursor: \"crosshair\",\n      pointerEvents: \"none\"\n    },\n    box: {\n      fill: \"white\",\n      opacity: 0.9,\n      stroke: \"#999\",\n      pointerEvents: \"none\"\n    },\n    dot: {\n      fill: \"#999\"\n    }\n  },\n  infoWidth: 90,\n  infoHeight: 25\n};","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\TimeMarker.js"],"names":["_","moment","React","PropTypes","timeFormat","ValueList","Label","TimeMarker","Component","renderLine","posx","props","infoStyle","line","height","renderTimeMarker","d","textStyle","fontSize","textAnchor","fill","dateStr","formatter","duration","format","isString","isFunction","renderInfoBox","w","infoWidth","infoBoxProps","align","style","box","label","width","infoHeight","infoValues","infoBox","showTime","time","render","timeScale","showLine","showInfoBox","propTypes","visible","bool","instanceOf","Date","oneOfType","string","arrayOf","shape","value","object","dot","number","func","defaultProps","stroke","cursor","pointerEvents","opacity"],"mappings":"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","sourcesContent":["/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { timeFormat } from \"d3-time-format\";\r\n\r\nimport \"moment-duration-format\";\r\n\r\nimport ValueList from \"./ValueList\";\r\nimport Label from \"./Label\";\r\n\r\nexport default class TimeMarker extends React.Component {\r\n    renderLine(posx) {\r\n        return (\r\n            <line\r\n                style={this.props.infoStyle.line}\r\n                x1={posx}\r\n                y1={0}\r\n                x2={posx}\r\n                y2={this.props.height}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderTimeMarker(d) {\r\n        const textStyle = {\r\n            fontSize: 11,\r\n            textAnchor: \"left\",\r\n            fill: \"#bdbdbd\"\r\n        };\r\n\r\n        let dateStr = `${d}`;\r\n        if (this.props.timeFormat === \"day\") {\r\n            const formatter = timeFormat(\"%d\");\r\n            dateStr = formatter(d);\r\n        } else if (this.props.timeFormat === \"month\") {\r\n            const formatter = timeFormat(\"%B\");\r\n            dateStr = formatter(d);\r\n        } else if (this.props.timeFormat === \"year\") {\r\n            const formatter = timeFormat(\"%Y\");\r\n            dateStr = formatter(d);\r\n        } else if (this.props.timeFormat === \"relative\") {\r\n            dateStr = moment.duration(+d).format();\r\n        } else if (_.isString(this.props.timeFormat)) {\r\n            const formatter = timeFormat(this.props.timeFormat);\r\n            dateStr = formatter(d);\r\n        } else if (_.isFunction(this.props.timeFormat)) {\r\n            dateStr = this.props.timeFormat(d);\r\n        }\r\n\r\n        return (\r\n            <text x={0} y={0} dy=\"1.2em\" style={textStyle}>\r\n                {dateStr}\r\n            </text>\r\n        );\r\n    }\r\n\r\n    renderInfoBox(posx) {\r\n        const w = this.props.infoWidth;\r\n\r\n        const infoBoxProps = {\r\n            align: \"left\",\r\n            style: {\r\n                box: this.props.infoStyle.box,\r\n                label: this.props.infoStyle.label\r\n            },\r\n            width: this.props.infoWidth,\r\n            height: this.props.infoHeight\r\n        };\r\n\r\n        if (this.props.infoValues) {\r\n            const infoBox = _.isString(this.props.infoValues) ? (\r\n                <Label {...infoBoxProps} label={this.props.infoValues} />\r\n            ) : (\r\n                <ValueList {...infoBoxProps} values={this.props.infoValues} />\r\n            );\r\n\r\n            if (posx + 10 + w < this.props.width - 50) {\r\n                return (\r\n                    <g transform={`translate(${posx + 10},${5})`}>\r\n                        {this.props.showTime ? this.renderTimeMarker(this.props.time) : null}\r\n                        <g transform={`translate(0,${this.props.showTime ? 20 : 0})`}>{infoBox}</g>\r\n                    </g>\r\n                );\r\n            }\r\n            return (\r\n                <g transform={`translate(${posx - w - 10},${5})`}>\r\n                    {this.props.showTime ? this.renderTimeMarker(this.props.time) : null}\r\n                    <g transform={`translate(0,${this.props.showTime ? 20 : 0})`}>{infoBox}</g>\r\n                </g>\r\n            );\r\n        }\r\n        return <g />;\r\n    }\r\n\r\n    render() {\r\n        const posx = this.props.timeScale(this.props.time);\r\n        if (posx) {\r\n            return (\r\n                <g>\r\n                    {this.props.showLine ? this.renderLine(posx) : null}\r\n                    {this.props.showInfoBox ? this.renderInfoBox(posx) : null}\r\n                </g>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nTimeMarker.propTypes = {\r\n    /**\r\n     * Show or hide this chart\r\n     */\r\n    visible: PropTypes.bool,\r\n\r\n    /**\r\n     * The time, expressed as a Javascript `Date` object, to display the marker\r\n     */\r\n    time: PropTypes.instanceOf(Date),\r\n\r\n    /**\r\n     * The values to show in the info box. This is either an array of\r\n     * objects, with each object specifying the label and value\r\n     * to be shown in the info box, or a simple string label\r\n     */\r\n    infoValues: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                label: PropTypes.string, // eslint-disable-line\r\n                value: PropTypes.string // eslint-disable-line\r\n            })\r\n        )\r\n    ]),\r\n\r\n    /**\r\n     * The style of the info box and connecting lines. This is an\r\n     * object of the form { line, box, dot }. Line, box and dot\r\n     * are themselves objects representing inline CSS for each of\r\n     * the pieces of the info marker.\r\n     */\r\n    infoStyle: PropTypes.shape({\r\n        line: PropTypes.object, // eslint-disable-line\r\n        box: PropTypes.object, // eslint-disable-line\r\n        dot: PropTypes.object // eslint-disable-line\r\n    }),\r\n\r\n    /**\r\n     * The width of the hover info box\r\n     */\r\n    infoWidth: PropTypes.number,\r\n\r\n    /**\r\n     * The height of the hover info box\r\n     */\r\n    infoHeight: PropTypes.number,\r\n\r\n    /**\r\n     * Display the info box at all. If you don't have any values to show and just\r\n     * want a line and a time (for example), you can set this to false.\r\n     */\r\n    showInfoBox: PropTypes.bool,\r\n\r\n    /**\r\n     * You can show the info box without the corresponding time marker. Why would\r\n     * you do this? I don't know. Actually, I do. You might use the ChartContainer\r\n     * tracker mechanism to show the line across multiple rows, then add a TimeMarker\r\n     * selectively to each row.\r\n     */\r\n    showLine: PropTypes.bool,\r\n\r\n    /**\r\n     * You can hide the time displayed above the info box. You might do this because\r\n     * it is already displayed elsewhere in your UI. Or maybe you just don't like it.\r\n     */\r\n    showTime: PropTypes.bool,\r\n\r\n    /**\r\n     * The time format used for display of the time above the info box.\r\n     */\r\n    timeFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n\r\n    /**\r\n     * [Internal] The timeScale supplied by the surrounding ChartContainer\r\n     */\r\n    timeScale: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The width supplied by the surrounding ChartContainer\r\n     */\r\n    width: PropTypes.number,\r\n\r\n    /**\r\n     * [Internal] The height supplied by the surrounding ChartContainer\r\n     */\r\n    height: PropTypes.number\r\n};\r\n\r\nTimeMarker.defaultProps = {\r\n    visible: true,\r\n    showInfoBox: true,\r\n    showLine: true,\r\n    showTime: true,\r\n    infoStyle: {\r\n        line: {\r\n            stroke: \"#999\",\r\n            cursor: \"crosshair\",\r\n            pointerEvents: \"none\"\r\n        },\r\n        box: {\r\n            fill: \"white\",\r\n            opacity: 0.9,\r\n            stroke: \"#999\",\r\n            pointerEvents: \"none\"\r\n        },\r\n        dot: {\r\n            fill: \"#999\"\r\n        }\r\n    },\r\n    infoWidth: 90,\r\n    infoHeight: 25\r\n};\r\n"]},"metadata":{},"sourceType":"module"}