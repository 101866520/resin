{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golde\\\\resin\\\\src\\\\ValueAxis.js\";\n\n/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n/**\r\n * Renders a 'axis' that display a label for a current tracker value:\r\n * ```\r\n *      ----+----------------+\r\n *          |     56.2G      |\r\n *          |      bps       |\r\n *          |                |\r\n *      ----+----------------+\r\n * ```\r\n * This would be used when you have many rows of data and the user is required\r\n * to interact with the data to see actual values. You would use this at the\r\n * end of the row and supply it with the current value. See the cycling example\r\n * for how that would all work.\r\n */\n\nconst ValueAxis = ({\n  width,\n  height,\n  value,\n  detail\n}) => {\n  const labelStyle = {\n    fill: \"#666\",\n    fontSize: 20,\n    textAnchor: \"middle\"\n  };\n  const detailStyle = {\n    fontSize: 12,\n    textAnchor: \"middle\",\n    fill: \"#9a9a9a\"\n  };\n  return React.createElement(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"rect\", {\n    key: \"background\",\n    x: \"0\",\n    y: \"0\",\n    width: width,\n    height: height,\n    style: {\n      fill: \"none\",\n      stroke: \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"text\", {\n    key: \"value\",\n    x: parseInt(width / 2, 10),\n    y: height / 2,\n    style: labelStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, value), React.createElement(\"text\", {\n    key: \"detail\",\n    x: parseInt(width / 2, 10),\n    y: height / 2,\n    dy: \"1.2em\",\n    style: detailStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, detail));\n};\n\nValueAxis.propTypes = {\n  /**\r\n   * Show or hide this\r\n   */\n  visible: PropTypes.bool,\n\n  /**\r\n   * If values are numbers, use this format string\r\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\r\n   * Use this to show what units are being used. It will appear below\r\n   * the value.\r\n   */\n  detail: PropTypes.string,\n\n  /**\r\n   * The width of the axis\r\n   */\n  width: PropTypes.number,\n\n  /**\r\n   * [Internal] The height of the axis\r\n   */\n  height: PropTypes.number\n};\nValueAxis.defaultProps = {\n  visible: true\n};\nexport default ValueAxis;","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\ValueAxis.js"],"names":["React","PropTypes","ValueAxis","width","height","value","detail","labelStyle","fill","fontSize","textAnchor","detailStyle","stroke","parseInt","propTypes","visible","bool","oneOfType","string","number","defaultProps"],"mappings":";;AAAA;;;;;;;;;AAUA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;;;;;;;;;;;;;;;AAcA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,KAAjB;AAAwBC,EAAAA;AAAxB,CAAD,KAAsC;AACpD,QAAMC,UAAU,GAAG;AACfC,IAAAA,IAAI,EAAE,MADS;AAEfC,IAAAA,QAAQ,EAAE,EAFK;AAGfC,IAAAA,UAAU,EAAE;AAHG,GAAnB;AAKA,QAAMC,WAAW,GAAG;AAChBF,IAAAA,QAAQ,EAAE,EADM;AAEhBC,IAAAA,UAAU,EAAE,QAFI;AAGhBF,IAAAA,IAAI,EAAE;AAHU,GAApB;AAKA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,GAAG,EAAC,YADR;AAEI,IAAA,CAAC,EAAC,GAFN;AAGI,IAAA,CAAC,EAAC,GAHN;AAII,IAAA,KAAK,EAAEL,KAJX;AAKI,IAAA,MAAM,EAAEC,MALZ;AAMI,IAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAE,MAAR;AAAgBI,MAAAA,MAAM,EAAE;AAAxB,KANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EASI;AAAM,IAAA,GAAG,EAAC,OAAV;AAAkB,IAAA,CAAC,EAAEC,QAAQ,CAACV,KAAK,GAAG,CAAT,EAAY,EAAZ,CAA7B;AAA8C,IAAA,CAAC,EAAEC,MAAM,GAAG,CAA1D;AAA6D,IAAA,KAAK,EAAEG,UAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,KADL,CATJ,EAYI;AACI,IAAA,GAAG,EAAC,QADR;AAEI,IAAA,CAAC,EAAEQ,QAAQ,CAACV,KAAK,GAAG,CAAT,EAAY,EAAZ,CAFf;AAGI,IAAA,CAAC,EAAEC,MAAM,GAAG,CAHhB;AAII,IAAA,EAAE,EAAC,OAJP;AAKI,IAAA,KAAK,EAAEO,WALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKL,MAPL,CAZJ,CADJ;AAwBH,CAnCD;;AAqCAJ,SAAS,CAACY,SAAV,GAAsB;AAClB;;;AAGAC,EAAAA,OAAO,EAAEd,SAAS,CAACe,IAJD;;AAMlB;;;AAGAX,EAAAA,KAAK,EAAEJ,SAAS,CAACgB,SAAV,CAAoB,CAAChB,SAAS,CAACiB,MAAX,EAAmBjB,SAAS,CAACkB,MAA7B,CAApB,CATW;;AAWlB;;;;AAIAb,EAAAA,MAAM,EAAEL,SAAS,CAACiB,MAfA;;AAiBlB;;;AAGAf,EAAAA,KAAK,EAAEF,SAAS,CAACkB,MApBC;;AAsBlB;;;AAGAf,EAAAA,MAAM,EAAEH,SAAS,CAACkB;AAzBA,CAAtB;AA4BAjB,SAAS,CAACkB,YAAV,GAAyB;AACrBL,EAAAA,OAAO,EAAE;AADY,CAAzB;AAIA,eAAeb,SAAf","sourcesContent":["/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Renders a 'axis' that display a label for a current tracker value:\r\n * ```\r\n *      ----+----------------+\r\n *          |     56.2G      |\r\n *          |      bps       |\r\n *          |                |\r\n *      ----+----------------+\r\n * ```\r\n * This would be used when you have many rows of data and the user is required\r\n * to interact with the data to see actual values. You would use this at the\r\n * end of the row and supply it with the current value. See the cycling example\r\n * for how that would all work.\r\n */\r\nconst ValueAxis = ({ width, height, value, detail }) => {\r\n    const labelStyle = {\r\n        fill: \"#666\",\r\n        fontSize: 20,\r\n        textAnchor: \"middle\"\r\n    };\r\n    const detailStyle = {\r\n        fontSize: 12,\r\n        textAnchor: \"middle\",\r\n        fill: \"#9a9a9a\"\r\n    };\r\n    return (\r\n        <g>\r\n            <rect\r\n                key=\"background\"\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width={width}\r\n                height={height}\r\n                style={{ fill: \"none\", stroke: \"none\" }}\r\n            />\r\n            <text key=\"value\" x={parseInt(width / 2, 10)} y={height / 2} style={labelStyle}>\r\n                {value}\r\n            </text>\r\n            <text\r\n                key=\"detail\"\r\n                x={parseInt(width / 2, 10)}\r\n                y={height / 2}\r\n                dy=\"1.2em\"\r\n                style={detailStyle}\r\n            >\r\n                {detail}\r\n            </text>\r\n        </g>\r\n    );\r\n};\r\n\r\nValueAxis.propTypes = {\r\n    /**\r\n     * Show or hide this\r\n     */\r\n    visible: PropTypes.bool,\r\n\r\n    /**\r\n     * If values are numbers, use this format string\r\n     */\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n    /**\r\n     * Use this to show what units are being used. It will appear below\r\n     * the value.\r\n     */\r\n    detail: PropTypes.string,\r\n\r\n    /**\r\n     * The width of the axis\r\n     */\r\n    width: PropTypes.number,\r\n\r\n    /**\r\n     * [Internal] The height of the axis\r\n     */\r\n    height: PropTypes.number\r\n};\r\n\r\nValueAxis.defaultProps = {\r\n    visible: true\r\n};\r\n\r\nexport default ValueAxis;\r\n"]},"metadata":{},"sourceType":"module"}