{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golde\\\\resin\\\\src\\\\YAxis.js\";\n\n/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport \"d3-transition\";\nimport _ from \"underscore\";\nimport merge from \"merge\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"; // eslint-disable-line\n\nimport PropTypes from \"prop-types\";\nimport { range } from \"d3-array\";\nimport { axisLeft, axisRight } from \"d3-axis\";\nimport { easeSinOut } from \"d3-ease\";\nimport { format } from \"d3-format\";\nimport { select } from \"d3-selection\";\nimport \"d3-selection-multi\";\nimport scaleAsString from \"./utils/scaleAsString\";\nconst MARGIN = 0;\nconst defaultStyle = {\n  label: {\n    stroke: \"none\",\n    fill: \"#8B7E7E\",\n    // Default label color\n    fontWeight: 100,\n    fontSize: 12,\n    font: '\"Goudy Bookletter 1911\", sans-serif\"'\n  },\n  values: {\n    stroke: \"none\",\n    fill: \"#8B7E7E\",\n    // Default value color\n    fontWeight: 100,\n    fontSize: 11,\n    font: '\"Goudy Bookletter 1911\", sans-serif\"'\n  },\n  ticks: {\n    fill: \"none\",\n    stroke: \"#C0C0C0\"\n  },\n  axis: {\n    fill: \"none\",\n    stroke: \"#C0C0C0\"\n  }\n};\n/**\r\n * The `YAxis` widget displays a vertical axis to the left or right\r\n * of the charts. A `YAxis` always appears within a `ChartRow`, from\r\n * which it gets its height and positioning. You can have more than\r\n * one axis per row. You do control how wide it is.\r\n *\r\n * Here's a simple YAxis example:\r\n *\r\n * ```js\r\n * <YAxis\r\n *   id=\"price-axis\"\r\n *   label=\"Price (USD)\"\r\n *   min={0} max={100}\r\n *   width=\"60\"\r\n *   type=\"linear\"\r\n *   format=\"$,.2f\"\r\n * />\r\n * ```\r\n *\r\n * Visually you can control the axis `label`, its size via the `width`\r\n * prop, its `format`, and `type` of scale (linear). You can quicky turn\r\n * it on and off with the `visible` prop.\r\n *\r\n * Each axis also defines a scale through a `min` and `max` prop. Chart\r\n * then refer to the axis by by citing the axis `id` in their `axis`\r\n * prop. Those charts will then use the axis scale for their y-scale.\r\n * This is what ties them together. Many charts can use the same axis,\r\n * or not.\r\n *\r\n * Here is an example of two line charts that each have their own axis:\r\n *\r\n * ```js\r\n * <ChartContainer timeRange={audSeries.timerange()}>\r\n *     <ChartRow height=\"200\">\r\n *         <YAxis id=\"aud\" label=\"AUD\" min={0.5} max={1.5} width=\"60\" format=\"$,.2f\"/>\r\n *         <Charts>\r\n *             <LineChart axis=\"aud\" series={audSeries} style={audStyle}/>\r\n *             <LineChart axis=\"euro\" series={euroSeries} style={euroStyle}/>\r\n *         </Charts>\r\n *         <YAxis id=\"euro\" label=\"Euro\" min={0.5} max={1.5} width=\"80\" format=\"$,.2f\"/>\r\n *     </ChartRow>\r\n * </ChartContainer>\r\n * ```\r\n *\r\n *  Note that there are two `<YAxis>` components defined here, one before\r\n *  the `<Charts>` block and one after. This defines that the first axis will\r\n *  appear to the left of the charts and the second will appear right of the charts.\r\n *  Each of the line charts uses its `axis` prop to identify the axis (\"aud\" or \"euro\")\r\n *  it will use for its vertical scale.\r\n */\n\nexport default class YAxis extends React.Component {\n  componentDidMount() {\n    this.renderAxis(this.props.align, this.props.scale, +this.props.width, +this.props.height, this.props.showGrid, +this.props.chartExtent, this.props.hideAxisLine, this.props.absolute, this.props.type, this.props.format, this.props.label, this.props.tickCount, this.props.min, this.props.max);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const scale = nextProps.scale,\n          align = nextProps.align,\n          width = nextProps.width,\n          height = nextProps.height,\n          chartExtent = nextProps.chartExtent,\n          absolute = nextProps.absolute,\n          format = nextProps.format,\n          type = nextProps.type,\n          showGrid = nextProps.showGrid,\n          hideAxisLine = nextProps.hideAxisLine,\n          label = nextProps.label,\n          tickCount = nextProps.tickCount,\n          min = nextProps.min,\n          max = nextProps.max;\n\n    if (scaleAsString(this.props.scale) !== scaleAsString(scale)) {\n      this.updateAxis(align, scale, width, height, showGrid, chartExtent, hideAxisLine, absolute, type, format, label, tickCount, min, max);\n    } else if (this.props.format !== format || this.props.align !== align || this.props.width !== width || this.props.height !== height || this.props.type !== type || this.props.absolute !== absolute || this.props.chartExtent !== chartExtent || this.props.showGrid !== showGrid || this.props.hideAxisLine !== hideAxisLine) {\n      this.renderAxis(align, scale, +width, +height, showGrid, chartExtent, hideAxisLine, absolute, type, format, label, tickCount, min, max);\n    } else if (this.props.label !== label) {\n      this.updateLabel(label);\n    }\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  yformat(fmt) {\n    if (_.isString(fmt)) {\n      return format(fmt);\n    } else if (_.isFunction(fmt)) {\n      return fmt;\n    } else {\n      return format(\"\");\n    }\n  }\n\n  mergeStyles(style) {\n    return {\n      labelStyle: merge(true, defaultStyle.label, this.props.style.label ? this.props.style.label : {}),\n      valueStyle: merge(true, defaultStyle.values, this.props.style.values ? this.props.style.values : {}),\n      axisStyle: merge(true, defaultStyle.axis, this.props.style.axis ? this.props.style.axis : {}),\n      tickStyle: merge(true, defaultStyle.ticks, this.props.style.ticks ? this.props.style.ticks : {})\n    };\n  }\n\n  postSelect(style, hideAxisLine, height) {\n    const valueStyle = style.valueStyle,\n          tickStyle = style.tickStyle,\n          axisStyle = style.axisStyle;\n    select(ReactDOM.findDOMNode(this)).select(\"g\").selectAll(\".tick\").select(\"text\").styles(valueStyle);\n    select(ReactDOM.findDOMNode(this)).select(\"g\").selectAll(\".tick\").select(\"line\").styles(tickStyle);\n    select(ReactDOM.findDOMNode(this)).select(\"g\").selectAll(\".domain\").remove();\n\n    if (!hideAxisLine) {\n      select(ReactDOM.findDOMNode(this)).select(\"g\").append(\"line\").styles(axisStyle).attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", 0).attr(\"y2\", height);\n    }\n  }\n\n  generator(type, absolute, yformat, axis, scale, height, tickCount, min, max) {\n    let axisGenerator;\n\n    if (type === \"linear\" || type === \"power\") {\n      if (tickCount > 0) {\n        const stepSize = (max - min) / (tickCount - 1);\n        axisGenerator = axis(scale).tickValues(range(min, max + max / 10000, stepSize)).tickFormat(d => {\n          if (absolute) {\n            return yformat(Math.abs(d));\n          }\n\n          return yformat(d);\n        }).tickSizeOuter(0);\n      } else {\n        if (height <= 200) {\n          axisGenerator = axis(scale).ticks(4).tickFormat(d => {\n            if (absolute) {\n              return yformat(Math.abs(d));\n            }\n\n            return yformat(d);\n          }).tickSizeOuter(0);\n        } else {\n          axisGenerator = axis(scale).tickFormat(d => {\n            if (absolute) {\n              return yformat(Math.abs(d));\n            }\n\n            return yformat(d);\n          }).tickSizeOuter(0);\n        }\n      }\n    } else if (type === \"log\") {\n      if (min === 0) {\n        throw Error(\"In a log scale, minimum value can't be 0\");\n      }\n\n      axisGenerator = axis(scale).ticks(10, \".2s\").tickSizeOuter(0);\n    }\n\n    return axisGenerator;\n  }\n\n  renderAxis(align, scale, width, height, showGrid, chartExtent, hideAxisLine, absolute, type, fmt, label, tickCount, min, max) {\n    const yformat = this.yformat(fmt);\n    const axis = align === \"left\" ? axisLeft : axisRight;\n    const style = this.mergeStyles(this.props.style);\n    const labelStyle = style.labelStyle,\n          valueStyle = style.valueStyle;\n    const tickSize = showGrid && this.props.isInnerAxis ? -chartExtent : 5;\n    const x = align === \"left\" ? width - MARGIN : 0;\n    const labelOffset = align === \"left\" ? this.props.labelOffset - 50 : 40 + this.props.labelOffset; // Axis generator\n\n    const axisGenerator = this.generator(type, absolute, yformat, axis, scale, height, tickCount, min, max); // Remove the old axis from under this DOM node\n\n    select(ReactDOM.findDOMNode(this)).selectAll(\"*\").remove(); // Add the new axis\n\n    this.axis = select(ReactDOM.findDOMNode(this)).append(\"g\").attr(\"transform\", \"translate(\".concat(x, \",0)\")).attr(\"class\", \"yaxis\").styles(valueStyle).call(axisGenerator.tickSize(tickSize)).append(\"text\").text(label || this.props.label).styles(labelStyle).attr(\"transform\", \"rotate(-90)\").attr(\"class\", \"yaxislabel\").attr(\"y\", labelOffset).attr(\"dy\", \".71em\").attr(\"text-anchor\", \"end\");\n    this.postSelect(style, hideAxisLine, height);\n  }\n\n  updateAxis(align, scale, width, height, showGrid, chartExtent, hideAxisLine, absolute, type, fmt, label, tickCount, min, max) {\n    const yformat = this.yformat(fmt);\n    const axis = align === \"left\" ? axisLeft : axisRight;\n    const style = this.mergeStyles(this.props.style);\n    const tickSize = showGrid && this.props.isInnerAxis ? -chartExtent : 5;\n    const axisGenerator = this.generator(type, absolute, yformat, axis, scale, height, tickCount, min, max); // Transition the existing axis\n\n    select(ReactDOM.findDOMNode(this)).select(\".yaxis\").transition().duration(this.props.transition).ease(easeSinOut).call(axisGenerator.tickSize(tickSize));\n    this.updateLabel(label);\n    this.postSelect(style, hideAxisLine, height);\n  }\n\n  updateLabel(label) {\n    select(ReactDOM.findDOMNode(this)).select(\".yaxislabel\").text(label);\n  }\n\n  render() {\n    return React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    });\n  }\n\n}\nYAxis.defaultProps = {\n  id: \"yaxis\",\n  // id referred to by the chart\n  align: \"left\",\n  // left or right of the chart\n  min: 0,\n  // range\n  max: 1,\n  showGrid: false,\n  hideAxisLine: false,\n  type: \"linear\",\n  // linear, log, or power\n  absolute: false,\n  // Display scale always positive\n  format: \".2s\",\n  // Format string for d3.format\n  labelOffset: 0,\n  // Offset the label position\n  transition: 100,\n  // Axis transition time\n  width: 80,\n  style: defaultStyle\n};\nYAxis.propTypes = {\n  /**\r\n   * A name for the axis which can be used by a chart to reference the axis.\r\n   * This is used by the ChartRow to match charts to this axis.\r\n   */\n  id: PropTypes.string.isRequired,\n  // eslint-disable-line\n\n  /**\r\n   * Show or hide this axis\r\n   */\n  visible: PropTypes.bool,\n\n  /**\r\n   * The label to be displayed alongside the axis.\r\n   */\n  label: PropTypes.string,\n\n  /**\r\n   * The scale type: linear, power, or log.\r\n   */\n  type: PropTypes.oneOf([\"linear\", \"power\", \"log\"]),\n\n  /**\r\n   * Minimum value, which combined with \"max\", define the scale of the axis.\r\n   */\n  min: PropTypes.number.isRequired,\n  // eslint-disable-line\n\n  /**\r\n   * Maximum value, which combined with \"min\", define the scale of the axis.\r\n   */\n  max: PropTypes.number.isRequired,\n  // eslint-disable-line\n\n  /**\r\n   * A d3 scale for the y-axis which you can use to transform your data in the y direction.\r\n   * If omitted, the scale will be automatically computed based on the max and min props.\r\n   */\n  yScale: PropTypes.func,\n\n  /**\r\n   * Render all ticks on the axis as positive values.\r\n   */\n  absolute: PropTypes.bool,\n  // eslint-disable-line\n\n  /**\r\n   * Object specifying the CSS by which the axis can be styled. The object can contain:\r\n   * \"label\", \"values\", \"axis\" and \"ticks\". Each of these is an inline CSS style applied\r\n   * to the axis label, axis values, axis line and ticks respectively.\r\n   *\r\n   * Note that these are passed into d3's styling, so are regular CSS property names\r\n   * and not React's camel case names (e.g. \"stroke-dasharray\" not strokeDasharray).\r\n   */\n  style: PropTypes.shape({\n    label: PropTypes.object,\n    // eslint-disable-line\n    axis: PropTypes.object,\n    // eslint-disable-line\n    values: PropTypes.object,\n    // esline-disable-line\n    ticks: PropTypes.object // esline-disable-line\n\n  }),\n\n  /**\r\n   * Render a horizontal grid by extending the axis ticks across the chart area. Note that this\r\n   * can only be applied to an inner axis (one next to a chart). If you have multiple axes then\r\n   * this can't be used on the outer axes. Also, if you have an axis on either side of the chart\r\n   * then you can use this, but the UX not be ideal.\r\n   */\n  showGrid: PropTypes.bool,\n\n  /**\r\n   * Render the axis line. This is a nice option of you are also using `showGrid` as you may not\r\n   * want both the vertical axis line and the extended ticks.\r\n   */\n  hideAxisLine: PropTypes.bool,\n\n  /**\r\n   * The transition time for moving from one scale to another\r\n   */\n  transition: PropTypes.number,\n\n  /**\r\n   * The width of the axis\r\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\r\n   * Offset the axis label from its default position. This allows you to\r\n   * fine tune the label location, which may be necessary depending on the\r\n   * scale and how much room the tick labels take up. Maybe positive or\r\n   * negative.\r\n   */\n  labelOffset: PropTypes.number,\n\n  /**\r\n   * If a string, the d3.format for the axis labels (e.g. `format=\\\"$,.2f\\\"`).\r\n   * If a function, that function will be called with each tick value and\r\n   * should generate a formatted string for that value to be used as the label\r\n   * for that tick (e.g. `function (n) { return Number(n).toFixed(2) }`).\r\n   */\n  format: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\r\n   * If the chart should be rendered to with the axis on the left or right.\r\n   * If you are using the axis in a ChartRow, you do not need to provide this.\r\n   */\n  align: PropTypes.string,\n\n  /**\r\n   * [Internal] The scale supplied by the ChartRow\r\n   */\n  scale: PropTypes.func,\n\n  /**\r\n   * [Internal] The height supplied by the surrounding ChartContainer\r\n   */\n  height: PropTypes.number,\n\n  /**\r\n   * The number of ticks\r\n   */\n  tickCount: PropTypes.number\n};","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\YAxis.js"],"names":["_","merge","React","ReactDOM","PropTypes","range","axisLeft","axisRight","easeSinOut","format","select","scaleAsString","MARGIN","defaultStyle","label","stroke","fill","fontWeight","fontSize","font","values","ticks","axis","YAxis","Component","componentDidMount","renderAxis","props","align","scale","width","height","showGrid","chartExtent","hideAxisLine","absolute","type","tickCount","min","max","componentWillReceiveProps","nextProps","updateAxis","updateLabel","shouldComponentUpdate","yformat","fmt","isString","isFunction","mergeStyles","style","labelStyle","valueStyle","axisStyle","tickStyle","postSelect","findDOMNode","selectAll","styles","remove","append","attr","generator","axisGenerator","stepSize","tickValues","tickFormat","d","Math","abs","tickSizeOuter","Error","tickSize","isInnerAxis","x","labelOffset","call","text","transition","duration","ease","render","defaultProps","id","propTypes","string","isRequired","visible","bool","oneOf","number","yScale","func","shape","object","oneOfType"],"mappings":"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","sourcesContent":["/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport \"d3-transition\";\r\nimport _ from \"underscore\";\r\nimport merge from \"merge\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\"; // eslint-disable-line\r\nimport PropTypes from \"prop-types\";\r\nimport { range } from \"d3-array\";\r\nimport { axisLeft, axisRight } from \"d3-axis\";\r\nimport { easeSinOut } from \"d3-ease\";\r\nimport { format } from \"d3-format\";\r\nimport { select } from \"d3-selection\";\r\nimport \"d3-selection-multi\";\r\nimport scaleAsString from \"./utils/scaleAsString\";\r\n\r\nconst MARGIN = 0;\r\n\r\nconst defaultStyle = {\r\n  label: {\r\n    stroke: \"none\",\r\n    fill: \"#8B7E7E\", // Default label color\r\n    fontWeight: 100,\r\n    fontSize: 12,\r\n    font: '\"Goudy Bookletter 1911\", sans-serif\"'\r\n  },\r\n  values: {\r\n    stroke: \"none\",\r\n    fill: \"#8B7E7E\", // Default value color\r\n    fontWeight: 100,\r\n    fontSize: 11,\r\n    font: '\"Goudy Bookletter 1911\", sans-serif\"'\r\n  },\r\n  ticks: {\r\n    fill: \"none\",\r\n    stroke: \"#C0C0C0\"\r\n  },\r\n  axis: {\r\n    fill: \"none\",\r\n    stroke: \"#C0C0C0\"\r\n  }\r\n};\r\n\r\n/**\r\n * The `YAxis` widget displays a vertical axis to the left or right\r\n * of the charts. A `YAxis` always appears within a `ChartRow`, from\r\n * which it gets its height and positioning. You can have more than\r\n * one axis per row. You do control how wide it is.\r\n *\r\n * Here's a simple YAxis example:\r\n *\r\n * ```js\r\n * <YAxis\r\n *   id=\"price-axis\"\r\n *   label=\"Price (USD)\"\r\n *   min={0} max={100}\r\n *   width=\"60\"\r\n *   type=\"linear\"\r\n *   format=\"$,.2f\"\r\n * />\r\n * ```\r\n *\r\n * Visually you can control the axis `label`, its size via the `width`\r\n * prop, its `format`, and `type` of scale (linear). You can quicky turn\r\n * it on and off with the `visible` prop.\r\n *\r\n * Each axis also defines a scale through a `min` and `max` prop. Chart\r\n * then refer to the axis by by citing the axis `id` in their `axis`\r\n * prop. Those charts will then use the axis scale for their y-scale.\r\n * This is what ties them together. Many charts can use the same axis,\r\n * or not.\r\n *\r\n * Here is an example of two line charts that each have their own axis:\r\n *\r\n * ```js\r\n * <ChartContainer timeRange={audSeries.timerange()}>\r\n *     <ChartRow height=\"200\">\r\n *         <YAxis id=\"aud\" label=\"AUD\" min={0.5} max={1.5} width=\"60\" format=\"$,.2f\"/>\r\n *         <Charts>\r\n *             <LineChart axis=\"aud\" series={audSeries} style={audStyle}/>\r\n *             <LineChart axis=\"euro\" series={euroSeries} style={euroStyle}/>\r\n *         </Charts>\r\n *         <YAxis id=\"euro\" label=\"Euro\" min={0.5} max={1.5} width=\"80\" format=\"$,.2f\"/>\r\n *     </ChartRow>\r\n * </ChartContainer>\r\n * ```\r\n *\r\n *  Note that there are two `<YAxis>` components defined here, one before\r\n *  the `<Charts>` block and one after. This defines that the first axis will\r\n *  appear to the left of the charts and the second will appear right of the charts.\r\n *  Each of the line charts uses its `axis` prop to identify the axis (\"aud\" or \"euro\")\r\n *  it will use for its vertical scale.\r\n */\r\nexport default class YAxis extends React.Component {\r\n  componentDidMount() {\r\n    this.renderAxis(\r\n      this.props.align,\r\n      this.props.scale,\r\n      +this.props.width,\r\n      +this.props.height,\r\n      this.props.showGrid,\r\n      +this.props.chartExtent,\r\n      this.props.hideAxisLine,\r\n      this.props.absolute,\r\n      this.props.type,\r\n      this.props.format,\r\n      this.props.label,\r\n      this.props.tickCount,\r\n      this.props.min,\r\n      this.props.max\r\n    );\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const {\r\n      scale,\r\n      align,\r\n      width,\r\n      height,\r\n      chartExtent,\r\n      absolute,\r\n      format,\r\n      type,\r\n      showGrid,\r\n      hideAxisLine,\r\n      label,\r\n      tickCount,\r\n      min,\r\n      max\r\n    } = nextProps;\r\n\r\n    if (scaleAsString(this.props.scale) !== scaleAsString(scale)) {\r\n      this.updateAxis(\r\n        align,\r\n        scale,\r\n        width,\r\n        height,\r\n        showGrid,\r\n        chartExtent,\r\n        hideAxisLine,\r\n        absolute,\r\n        type,\r\n        format,\r\n        label,\r\n        tickCount,\r\n        min,\r\n        max\r\n      );\r\n    } else if (\r\n      this.props.format !== format ||\r\n      this.props.align !== align ||\r\n      this.props.width !== width ||\r\n      this.props.height !== height ||\r\n      this.props.type !== type ||\r\n      this.props.absolute !== absolute ||\r\n      this.props.chartExtent !== chartExtent ||\r\n      this.props.showGrid !== showGrid ||\r\n      this.props.hideAxisLine !== hideAxisLine\r\n    ) {\r\n      this.renderAxis(\r\n        align,\r\n        scale,\r\n        +width,\r\n        +height,\r\n        showGrid,\r\n        chartExtent,\r\n        hideAxisLine,\r\n        absolute,\r\n        type,\r\n        format,\r\n        label,\r\n        tickCount,\r\n        min,\r\n        max\r\n      );\r\n    } else if (this.props.label !== label) {\r\n      this.updateLabel(label);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    return false;\r\n  }\r\n\r\n  yformat(fmt) {\r\n    if (_.isString(fmt)) {\r\n      return format(fmt);\r\n    } else if (_.isFunction(fmt)) {\r\n      return fmt;\r\n    } else {\r\n      return format(\"\");\r\n    }\r\n  }\r\n\r\n  mergeStyles(style) {\r\n    return {\r\n      labelStyle: merge(\r\n        true,\r\n        defaultStyle.label,\r\n        this.props.style.label ? this.props.style.label : {}\r\n      ),\r\n      valueStyle: merge(\r\n        true,\r\n        defaultStyle.values,\r\n        this.props.style.values ? this.props.style.values : {}\r\n      ),\r\n      axisStyle: merge(\r\n        true,\r\n        defaultStyle.axis,\r\n        this.props.style.axis ? this.props.style.axis : {}\r\n      ),\r\n      tickStyle: merge(\r\n        true,\r\n        defaultStyle.ticks,\r\n        this.props.style.ticks ? this.props.style.ticks : {}\r\n      )\r\n    };\r\n  }\r\n\r\n  postSelect(style, hideAxisLine, height) {\r\n    const { valueStyle, tickStyle, axisStyle } = style;\r\n    select(ReactDOM.findDOMNode(this))\r\n      .select(\"g\")\r\n      .selectAll(\".tick\")\r\n      .select(\"text\")\r\n      .styles(valueStyle);\r\n\r\n    select(ReactDOM.findDOMNode(this))\r\n      .select(\"g\")\r\n      .selectAll(\".tick\")\r\n      .select(\"line\")\r\n      .styles(tickStyle);\r\n\r\n    select(ReactDOM.findDOMNode(this))\r\n      .select(\"g\")\r\n      .selectAll(\".domain\")\r\n      .remove();\r\n\r\n    if (!hideAxisLine) {\r\n      select(ReactDOM.findDOMNode(this))\r\n        .select(\"g\")\r\n        .append(\"line\")\r\n        .styles(axisStyle)\r\n        .attr(\"x1\", 0)\r\n        .attr(\"y1\", 0)\r\n        .attr(\"x2\", 0)\r\n        .attr(\"y2\", height);\r\n    }\r\n  }\r\n\r\n  generator(type, absolute, yformat, axis, scale, height, tickCount, min, max) {\r\n    let axisGenerator;\r\n    if (type === \"linear\" || type === \"power\") {\r\n      if (tickCount > 0) {\r\n        const stepSize = (max - min) / (tickCount - 1);\r\n        axisGenerator = axis(scale)\r\n          .tickValues(range(min, max + max / 10000, stepSize))\r\n          .tickFormat(d => {\r\n            if (absolute) {\r\n              return yformat(Math.abs(d));\r\n            }\r\n            return yformat(d);\r\n          })\r\n          .tickSizeOuter(0);\r\n      } else {\r\n        if (height <= 200) {\r\n          axisGenerator = axis(scale)\r\n            .ticks(4)\r\n            .tickFormat(d => {\r\n              if (absolute) {\r\n                return yformat(Math.abs(d));\r\n              }\r\n              return yformat(d);\r\n            })\r\n            .tickSizeOuter(0);\r\n        } else {\r\n          axisGenerator = axis(scale)\r\n            .tickFormat(d => {\r\n              if (absolute) {\r\n                return yformat(Math.abs(d));\r\n              }\r\n              return yformat(d);\r\n            })\r\n            .tickSizeOuter(0);\r\n        }\r\n      }\r\n    } else if (type === \"log\") {\r\n      if (min === 0) {\r\n        throw Error(\"In a log scale, minimum value can't be 0\");\r\n      }\r\n      axisGenerator = axis(scale)\r\n        .ticks(10, \".2s\")\r\n        .tickSizeOuter(0);\r\n    }\r\n    return axisGenerator;\r\n  }\r\n\r\n  renderAxis(\r\n    align,\r\n    scale,\r\n    width,\r\n    height,\r\n    showGrid,\r\n    chartExtent,\r\n    hideAxisLine,\r\n    absolute,\r\n    type,\r\n    fmt,\r\n    label,\r\n    tickCount,\r\n    min,\r\n    max\r\n  ) {\r\n    const yformat = this.yformat(fmt);\r\n    const axis = align === \"left\" ? axisLeft : axisRight;\r\n    const style = this.mergeStyles(this.props.style);\r\n    const { labelStyle, valueStyle } = style;\r\n    const tickSize = showGrid && this.props.isInnerAxis ? -chartExtent : 5;\r\n    const x = align === \"left\" ? width - MARGIN : 0;\r\n    const labelOffset =\r\n      align === \"left\"\r\n        ? this.props.labelOffset - 50\r\n        : 40 + this.props.labelOffset;\r\n\r\n    // Axis generator\r\n    const axisGenerator = this.generator(\r\n      type,\r\n      absolute,\r\n      yformat,\r\n      axis,\r\n      scale,\r\n      height,\r\n      tickCount,\r\n      min,\r\n      max\r\n    );\r\n\r\n    // Remove the old axis from under this DOM node\r\n    select(ReactDOM.findDOMNode(this))\r\n      .selectAll(\"*\")\r\n      .remove();\r\n\r\n    // Add the new axis\r\n    this.axis = select(ReactDOM.findDOMNode(this))\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${x},0)`)\r\n      .attr(\"class\", \"yaxis\")\r\n      .styles(valueStyle)\r\n      .call(axisGenerator.tickSize(tickSize))\r\n      .append(\"text\")\r\n      .text(label || this.props.label)\r\n      .styles(labelStyle)\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"class\", \"yaxislabel\")\r\n      .attr(\"y\", labelOffset)\r\n      .attr(\"dy\", \".71em\")\r\n      .attr(\"text-anchor\", \"end\");\r\n\r\n    this.postSelect(style, hideAxisLine, height);\r\n  }\r\n\r\n  updateAxis(\r\n    align,\r\n    scale,\r\n    width,\r\n    height,\r\n    showGrid,\r\n    chartExtent,\r\n    hideAxisLine,\r\n    absolute,\r\n    type,\r\n    fmt,\r\n    label,\r\n    tickCount,\r\n    min,\r\n    max\r\n  ) {\r\n    const yformat = this.yformat(fmt);\r\n    const axis = align === \"left\" ? axisLeft : axisRight;\r\n    const style = this.mergeStyles(this.props.style);\r\n    const tickSize = showGrid && this.props.isInnerAxis ? -chartExtent : 5;\r\n\r\n    const axisGenerator = this.generator(\r\n      type,\r\n      absolute,\r\n      yformat,\r\n      axis,\r\n      scale,\r\n      height,\r\n      tickCount,\r\n      min,\r\n      max\r\n    );\r\n\r\n    // Transition the existing axis\r\n    select(ReactDOM.findDOMNode(this))\r\n      .select(\".yaxis\")\r\n      .transition()\r\n      .duration(this.props.transition)\r\n      .ease(easeSinOut)\r\n      .call(axisGenerator.tickSize(tickSize));\r\n\r\n    this.updateLabel(label);\r\n\r\n    this.postSelect(style, hideAxisLine, height);\r\n  }\r\n\r\n  updateLabel(label) {\r\n    select(ReactDOM.findDOMNode(this))\r\n      .select(\".yaxislabel\")\r\n      .text(label);\r\n  }\r\n\r\n  render() {\r\n    return <g />;\r\n  }\r\n}\r\n\r\nYAxis.defaultProps = {\r\n  id: \"yaxis\", // id referred to by the chart\r\n  align: \"left\", // left or right of the chart\r\n  min: 0, // range\r\n  max: 1,\r\n  showGrid: false,\r\n  hideAxisLine: false,\r\n  type: \"linear\", // linear, log, or power\r\n  absolute: false, // Display scale always positive\r\n  format: \".2s\", // Format string for d3.format\r\n  labelOffset: 0, // Offset the label position\r\n  transition: 100, // Axis transition time\r\n  width: 80,\r\n  style: defaultStyle\r\n};\r\n\r\nYAxis.propTypes = {\r\n  /**\r\n   * A name for the axis which can be used by a chart to reference the axis.\r\n   * This is used by the ChartRow to match charts to this axis.\r\n   */\r\n  id: PropTypes.string.isRequired, // eslint-disable-line\r\n\r\n  /**\r\n   * Show or hide this axis\r\n   */\r\n  visible: PropTypes.bool,\r\n\r\n  /**\r\n   * The label to be displayed alongside the axis.\r\n   */\r\n  label: PropTypes.string,\r\n\r\n  /**\r\n   * The scale type: linear, power, or log.\r\n   */\r\n  type: PropTypes.oneOf([\"linear\", \"power\", \"log\"]),\r\n\r\n  /**\r\n   * Minimum value, which combined with \"max\", define the scale of the axis.\r\n   */\r\n  min: PropTypes.number.isRequired, // eslint-disable-line\r\n\r\n  /**\r\n   * Maximum value, which combined with \"min\", define the scale of the axis.\r\n   */\r\n  max: PropTypes.number.isRequired, // eslint-disable-line\r\n\r\n  /**\r\n   * A d3 scale for the y-axis which you can use to transform your data in the y direction.\r\n   * If omitted, the scale will be automatically computed based on the max and min props.\r\n   */\r\n  yScale: PropTypes.func,\r\n\r\n  /**\r\n   * Render all ticks on the axis as positive values.\r\n   */\r\n  absolute: PropTypes.bool, // eslint-disable-line\r\n\r\n  /**\r\n   * Object specifying the CSS by which the axis can be styled. The object can contain:\r\n   * \"label\", \"values\", \"axis\" and \"ticks\". Each of these is an inline CSS style applied\r\n   * to the axis label, axis values, axis line and ticks respectively.\r\n   *\r\n   * Note that these are passed into d3's styling, so are regular CSS property names\r\n   * and not React's camel case names (e.g. \"stroke-dasharray\" not strokeDasharray).\r\n   */\r\n  style: PropTypes.shape({\r\n    label: PropTypes.object, // eslint-disable-line\r\n    axis: PropTypes.object, // eslint-disable-line\r\n    values: PropTypes.object, // esline-disable-line\r\n    ticks: PropTypes.object // esline-disable-line\r\n  }),\r\n\r\n  /**\r\n   * Render a horizontal grid by extending the axis ticks across the chart area. Note that this\r\n   * can only be applied to an inner axis (one next to a chart). If you have multiple axes then\r\n   * this can't be used on the outer axes. Also, if you have an axis on either side of the chart\r\n   * then you can use this, but the UX not be ideal.\r\n   */\r\n  showGrid: PropTypes.bool,\r\n\r\n  /**\r\n   * Render the axis line. This is a nice option of you are also using `showGrid` as you may not\r\n   * want both the vertical axis line and the extended ticks.\r\n   */\r\n  hideAxisLine: PropTypes.bool,\r\n\r\n  /**\r\n   * The transition time for moving from one scale to another\r\n   */\r\n  transition: PropTypes.number,\r\n\r\n  /**\r\n   * The width of the axis\r\n   */\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n  /**\r\n   * Offset the axis label from its default position. This allows you to\r\n   * fine tune the label location, which may be necessary depending on the\r\n   * scale and how much room the tick labels take up. Maybe positive or\r\n   * negative.\r\n   */\r\n  labelOffset: PropTypes.number,\r\n\r\n  /**\r\n   * If a string, the d3.format for the axis labels (e.g. `format=\\\"$,.2f\\\"`).\r\n   * If a function, that function will be called with each tick value and\r\n   * should generate a formatted string for that value to be used as the label\r\n   * for that tick (e.g. `function (n) { return Number(n).toFixed(2) }`).\r\n   */\r\n  format: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n\r\n  /**\r\n   * If the chart should be rendered to with the axis on the left or right.\r\n   * If you are using the axis in a ChartRow, you do not need to provide this.\r\n   */\r\n  align: PropTypes.string,\r\n\r\n  /**\r\n   * [Internal] The scale supplied by the ChartRow\r\n   */\r\n  scale: PropTypes.func,\r\n\r\n  /**\r\n   * [Internal] The height supplied by the surrounding ChartContainer\r\n   */\r\n  height: PropTypes.number,\r\n\r\n  /**\r\n   * The number of ticks\r\n   */\r\n  tickCount: PropTypes.number\r\n};\r\n"]},"metadata":{},"sourceType":"module"}