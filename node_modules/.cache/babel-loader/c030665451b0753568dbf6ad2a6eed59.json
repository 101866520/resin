{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golde\\\\resin\\\\src\\\\LineChart.js\";\n\n/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport _ from \"underscore\";\nimport { line } from \"d3-shape\";\nimport merge from \"merge\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TimeSeries } from \"pondjs\";\nimport { Styler } from \"./utils/styler\";\nimport scaleAsString from \"./utils/scaleAsString\";\nimport curves from \"./utils/curve\";\nconst defaultStyle = {\n  normal: {\n    stroke: \"steelblue\",\n    fill: \"none\",\n    strokeWidth: 1\n  },\n  highlighted: {\n    stroke: \"#5a98cb\",\n    fill: \"none\",\n    strokeWidth: 1\n  },\n  selected: {\n    stroke: \"steelblue\",\n    fill: \"none\",\n    strokeWidth: 2\n  },\n  muted: {\n    stroke: \"steelblue\",\n    fill: \"none\",\n    opacity: 0.4,\n    strokeWidth: 1\n  }\n};\nexport default class LineChart extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    const newSeries = nextProps.series;\n    const oldSeries = this.props.series;\n    const width = nextProps.width;\n    const timeScale = nextProps.timeScale;\n    const yScale = nextProps.yScale;\n    const interpolation = nextProps.interpolation;\n    const highlight = nextProps.highlight;\n    const selection = nextProps.selection;\n    const columns = nextProps.columns; // What changed?\n\n    const widthChanged = this.props.width !== width;\n    const timeScaleChanged = scaleAsString(this.props.timeScale) !== scaleAsString(timeScale);\n    const yAxisScaleChanged = this.props.yScale !== yScale;\n    const interpolationChanged = this.props.interpolation !== interpolation;\n    const highlightChanged = this.props.highlight !== highlight;\n    const selectionChanged = this.props.selection !== selection;\n    const columnsChanged = this.props.columns !== columns;\n    let seriesChanged = false;\n\n    if (oldSeries.size() !== newSeries.size()) {\n      seriesChanged = true;\n    } else {\n      seriesChanged = !TimeSeries.is(oldSeries, newSeries);\n    }\n\n    return widthChanged || seriesChanged || timeScaleChanged || yAxisScaleChanged || interpolationChanged || highlightChanged || selectionChanged || columnsChanged;\n  }\n\n  handleHover(e, column) {\n    if (this.props.onHighlightChange) {\n      this.props.onHighlightChange(column);\n    }\n  }\n\n  handleHoverLeave() {\n    if (this.props.onHighlightChange) {\n      this.props.onHighlightChange(null);\n    }\n  }\n\n  handleClick(e, column) {\n    e.stopPropagation();\n\n    if (this.props.onSelectionChange) {\n      this.props.onSelectionChange(column);\n    }\n  }\n\n  providedPathStyleMap(column) {\n    let style = {};\n\n    if (this.props.style) {\n      if (this.props.style instanceof Styler) {\n        style = this.props.style.lineChartStyle()[column];\n      } else if (_.isFunction(this.props.style)) {\n        style = this.props.style(column);\n      } else if (_.isObject(this.props.style)) {\n        style = this.props.style ? this.props.style[column] : defaultStyle;\n      }\n    }\n\n    return style;\n  }\n  /**\r\n   * Returns the style used for drawing the path\r\n   */\n\n\n  pathStyle(column) {\n    let style;\n    const styleMap = this.providedPathStyleMap(column);\n    const isHighlighted = this.props.highlight && column === this.props.highlight;\n    const isSelected = this.props.selection && column === this.props.selection;\n\n    if (this.props.selection) {\n      if (isSelected) {\n        style = merge(true, defaultStyle.selected, styleMap.selected ? styleMap.selected : {});\n      } else if (isHighlighted) {\n        style = merge(true, defaultStyle.highlighted, styleMap.highlighted ? styleMap.highlighted : {});\n      } else {\n        style = merge(true, defaultStyle.muted, styleMap.muted ? styleMap.muted : {});\n      }\n    } else if (isHighlighted) {\n      style = merge(true, defaultStyle.highlighted, styleMap.highlighted ? styleMap.highlighted : {});\n    } else {\n      style = merge(true, defaultStyle.normal, styleMap.normal);\n    }\n\n    style.pointerEvents = \"none\";\n    return style;\n  }\n\n  renderPath(data, column, key) {\n    const hitStyle = {\n      stroke: \"white\",\n      fill: \"none\",\n      opacity: 0.0,\n      strokeWidth: 7,\n      cursor: \"crosshair\",\n      pointerEvents: \"stroke\"\n    }; // D3 generates each path\n\n    const path = line().curve(curves[this.props.interpolation]).x(d => this.props.timeScale(d.x)).y(d => this.props.yScale(d.y))(data);\n    return React.createElement(\"g\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"path\", {\n      d: path,\n      style: this.pathStyle(column),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"path\", {\n      d: path,\n      style: hitStyle,\n      onClick: e => this.handleClick(e, column),\n      onMouseLeave: () => this.handleHoverLeave(),\n      onMouseMove: e => this.handleHover(e, column),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }));\n  }\n\n  renderLines() {\n    return _.map(this.props.columns, column => this.renderLine(column));\n  }\n\n  renderLine(column) {\n    const pathLines = [];\n    let count = 1;\n\n    if (this.props.breakLine) {\n      // Remove nulls and NaNs from the line by generating a break in the line\n      let currentPoints = null;\n\n      for (const d of this.props.series.events()) {\n        const timestamp = new Date(d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2);\n        const value = d.get(column);\n        const badPoint = _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\n\n        if (!badPoint) {\n          if (!currentPoints) currentPoints = [];\n          currentPoints.push({\n            x: timestamp,\n            y: value\n          });\n        } else if (currentPoints) {\n          if (currentPoints.length > 1) {\n            pathLines.push(this.renderPath(currentPoints, column, count));\n            count += 1;\n          }\n\n          currentPoints = null;\n        }\n      }\n\n      if (currentPoints && currentPoints.length > 1) {\n        pathLines.push(this.renderPath(currentPoints, column, count));\n        count += 1;\n      }\n    } else {\n      // Ignore nulls and NaNs in the line\n      const cleanedPoints = [];\n\n      for (const d of this.props.series.events()) {\n        const timestamp = new Date(d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2);\n        const value = d.get(column);\n        const badPoint = _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\n\n        if (!badPoint) {\n          cleanedPoints.push({\n            x: timestamp,\n            y: value\n          });\n        }\n      }\n\n      pathLines.push(this.renderPath(cleanedPoints, column, count));\n      count += 1;\n    }\n\n    return React.createElement(\"g\", {\n      key: column,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, pathLines);\n  }\n\n  render() {\n    return React.createElement(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, this.renderLines());\n  }\n\n}\nLineChart.propTypes = {\n  /**\r\n   * Show or hide this chart\r\n   */\n  visible: PropTypes.bool,\n\n  /**\r\n   * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize\r\n   */\n  series: PropTypes.instanceOf(TimeSeries).isRequired,\n\n  /**\r\n   * Reference to the axis which provides the vertical scale for drawing.\r\n   * e.g. specifying `axis=\"trafficRate\"` would refer the y-scale of the YAxis\r\n   * with id=\"trafficRate\".\r\n   */\n  axis: PropTypes.string.isRequired,\n  // eslint-disable-line\n\n  /**\r\n   * Which columns from the series to draw.\r\n   *\r\n   * NOTE : Columns can't have periods because periods\r\n   * represent a path to deep data in the underlying events\r\n   * (i.e. reference into nested data structures)\r\n   */\n  columns: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * The styles to apply to the underlying SVG lines. This is a mapping\r\n   * of column names to objects with style attributes, in the following\r\n   * format:\r\n   *\r\n   * ```\r\n   * const style = {\r\n   *     in: {\r\n   *         normal: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\r\n   *         highlighted: {stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1},\r\n   *         selected: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\r\n   *         muted: {stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1}\r\n   *     },\r\n   *     out: {\r\n   *         ...\r\n   *     }\r\n   * };\r\n   *\r\n   *  <LineChart style={style} ... />\r\n   * ```\r\n   *\r\n   * Alternatively, you can pass in a `Styler`. For example:\r\n   *\r\n   * ```\r\n   * const currencyStyle = Styler([\r\n   *     {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\r\n   *     {key: \"euro\", color: \"#F68B24\", width: 2}\r\n   * ]);\r\n   *\r\n   * <LineChart columns={[\"aud\", \"euro\"]} style={currencyStyle} ... />\r\n   *\r\n   * ```\r\n   */\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.instanceOf(Styler)]),\n\n  /**\r\n   * Any of D3's interpolation modes.\r\n   */\n  interpolation: PropTypes.oneOf([\"curveBasis\", \"curveBasisOpen\", \"curveBundle\", \"curveCardinal\", \"curveCardinalOpen\", \"curveCatmullRom\", \"curveCatmullRomOpen\", \"curveLinear\", \"curveMonotoneX\", \"curveMonotoneY\", \"curveNatural\", \"curveRadial\", \"curveStep\", \"curveStepAfter\", \"curveStepBefore\"]),\n\n  /**\r\n   * The determines how to handle bad/missing values in the supplied\r\n   * TimeSeries. A missing value can be null or NaN. If breakLine\r\n   * is set to true (the default) then the line will be broken on either\r\n   * side of the bad value(s). If breakLine is false bad values\r\n   * are simply removed and the adjoining points are connected.\r\n   */\n  breakLine: PropTypes.bool,\n\n  /**\r\n   * The selected item, which will be rendered in the \"selected\" style.\r\n   * If a line is selected, all other lines will be rendered in the \"muted\" style.\r\n   *\r\n   * See also `onSelectionChange`\r\n   */\n  selection: PropTypes.string,\n\n  /**\r\n   * A callback that will be called when the selection changes. It will be called\r\n   * with the column corresponding to the line being clicked.\r\n   */\n  onSelectionChange: PropTypes.func,\n\n  /**\r\n   * The highlighted column, which will be rendered in the \"highlighted\" style.\r\n   *\r\n   * See also `onHighlightChange`\r\n   */\n  highlight: PropTypes.string,\n\n  /**\r\n   * A callback that will be called when the hovered over line changes.\r\n   * It will be called with the corresponding column.\r\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\r\n   * [Internal] The timeScale supplied by the surrounding ChartContainer\r\n   */\n  timeScale: PropTypes.func,\n\n  /**\r\n   * [Internal] The yScale supplied by the associated YAxis\r\n   */\n  yScale: PropTypes.func,\n\n  /**\r\n   * [Internal] The width supplied by the surrounding ChartContainer\r\n   */\n  width: PropTypes.number\n};\nLineChart.defaultProps = {\n  visible: true,\n  columns: [\"value\"],\n  smooth: true,\n  interpolation: \"curveLinear\",\n  breakLine: true\n};","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\LineChart.js"],"names":["_","line","merge","React","PropTypes","TimeSeries","Styler","scaleAsString","curves","defaultStyle","normal","stroke","fill","strokeWidth","highlighted","selected","muted","opacity","LineChart","Component","shouldComponentUpdate","nextProps","newSeries","series","oldSeries","props","width","timeScale","yScale","interpolation","highlight","selection","columns","widthChanged","timeScaleChanged","yAxisScaleChanged","interpolationChanged","highlightChanged","selectionChanged","columnsChanged","seriesChanged","size","is","handleHover","e","column","onHighlightChange","handleHoverLeave","handleClick","stopPropagation","onSelectionChange","providedPathStyleMap","style","lineChartStyle","isFunction","isObject","pathStyle","styleMap","isHighlighted","isSelected","pointerEvents","renderPath","data","key","hitStyle","cursor","path","curve","x","d","y","renderLines","map","renderLine","pathLines","count","breakLine","currentPoints","events","timestamp","Date","begin","getTime","end","value","get","badPoint","isNull","isNaN","isFinite","push","length","cleanedPoints","render","propTypes","visible","bool","instanceOf","isRequired","axis","string","arrayOf","oneOfType","object","func","oneOf","number","defaultProps","smooth"],"mappings":"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","sourcesContent":["/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport { line } from \"d3-shape\";\r\nimport merge from \"merge\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TimeSeries } from \"pondjs\";\r\n\r\nimport { Styler } from \"./utils/styler\";\r\nimport scaleAsString from \"./utils/scaleAsString\";\r\nimport curves from \"./utils/curve\";\r\n\r\nconst defaultStyle = {\r\n  normal: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 1 },\r\n  highlighted: { stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1 },\r\n  selected: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 2 },\r\n  muted: { stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1 }\r\n};\r\n\r\nexport default class LineChart extends React.Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const newSeries = nextProps.series;\r\n    const oldSeries = this.props.series;\r\n\r\n    const width = nextProps.width;\r\n    const timeScale = nextProps.timeScale;\r\n    const yScale = nextProps.yScale;\r\n    const interpolation = nextProps.interpolation;\r\n    const highlight = nextProps.highlight;\r\n    const selection = nextProps.selection;\r\n    const columns = nextProps.columns;\r\n\r\n    // What changed?\r\n    const widthChanged = this.props.width !== width;\r\n    const timeScaleChanged =\r\n      scaleAsString(this.props.timeScale) !== scaleAsString(timeScale);\r\n    const yAxisScaleChanged = this.props.yScale !== yScale;\r\n    const interpolationChanged = this.props.interpolation !== interpolation;\r\n    const highlightChanged = this.props.highlight !== highlight;\r\n    const selectionChanged = this.props.selection !== selection;\r\n    const columnsChanged = this.props.columns !== columns;\r\n\r\n    let seriesChanged = false;\r\n    if (oldSeries.size() !== newSeries.size()) {\r\n      seriesChanged = true;\r\n    } else {\r\n      seriesChanged = !TimeSeries.is(oldSeries, newSeries);\r\n    }\r\n\r\n    return (\r\n      widthChanged ||\r\n      seriesChanged ||\r\n      timeScaleChanged ||\r\n      yAxisScaleChanged ||\r\n      interpolationChanged ||\r\n      highlightChanged ||\r\n      selectionChanged ||\r\n      columnsChanged\r\n    );\r\n  }\r\n\r\n  handleHover(e, column) {\r\n    if (this.props.onHighlightChange) {\r\n      this.props.onHighlightChange(column);\r\n    }\r\n  }\r\n\r\n  handleHoverLeave() {\r\n    if (this.props.onHighlightChange) {\r\n      this.props.onHighlightChange(null);\r\n    }\r\n  }\r\n\r\n  handleClick(e, column) {\r\n    e.stopPropagation();\r\n    if (this.props.onSelectionChange) {\r\n      this.props.onSelectionChange(column);\r\n    }\r\n  }\r\n\r\n  providedPathStyleMap(column) {\r\n    let style = {};\r\n    if (this.props.style) {\r\n      if (this.props.style instanceof Styler) {\r\n        style = this.props.style.lineChartStyle()[column];\r\n      } else if (_.isFunction(this.props.style)) {\r\n        style = this.props.style(column);\r\n      } else if (_.isObject(this.props.style)) {\r\n        style = this.props.style ? this.props.style[column] : defaultStyle;\r\n      }\r\n    }\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Returns the style used for drawing the path\r\n   */\r\n  pathStyle(column) {\r\n    let style;\r\n\r\n    const styleMap = this.providedPathStyleMap(column);\r\n    const isHighlighted =\r\n      this.props.highlight && column === this.props.highlight;\r\n    const isSelected = this.props.selection && column === this.props.selection;\r\n\r\n    if (this.props.selection) {\r\n      if (isSelected) {\r\n        style = merge(\r\n          true,\r\n          defaultStyle.selected,\r\n          styleMap.selected ? styleMap.selected : {}\r\n        );\r\n      } else if (isHighlighted) {\r\n        style = merge(\r\n          true,\r\n          defaultStyle.highlighted,\r\n          styleMap.highlighted ? styleMap.highlighted : {}\r\n        );\r\n      } else {\r\n        style = merge(\r\n          true,\r\n          defaultStyle.muted,\r\n          styleMap.muted ? styleMap.muted : {}\r\n        );\r\n      }\r\n    } else if (isHighlighted) {\r\n      style = merge(\r\n        true,\r\n        defaultStyle.highlighted,\r\n        styleMap.highlighted ? styleMap.highlighted : {}\r\n      );\r\n    } else {\r\n      style = merge(true, defaultStyle.normal, styleMap.normal);\r\n    }\r\n\r\n    style.pointerEvents = \"none\";\r\n\r\n    return style;\r\n  }\r\n\r\n  renderPath(data, column, key) {\r\n    const hitStyle = {\r\n      stroke: \"white\",\r\n      fill: \"none\",\r\n      opacity: 0.0,\r\n      strokeWidth: 7,\r\n      cursor: \"crosshair\",\r\n      pointerEvents: \"stroke\"\r\n    };\r\n\r\n    // D3 generates each path\r\n    const path = line()\r\n      .curve(curves[this.props.interpolation])\r\n      .x(d => this.props.timeScale(d.x))\r\n      .y(d => this.props.yScale(d.y))(data);\r\n\r\n    return (\r\n      <g key={key}>\r\n        <path d={path} style={this.pathStyle(column)} />\r\n        <path\r\n          d={path}\r\n          style={hitStyle}\r\n          onClick={e => this.handleClick(e, column)}\r\n          onMouseLeave={() => this.handleHoverLeave()}\r\n          onMouseMove={e => this.handleHover(e, column)}\r\n        />\r\n      </g>\r\n    );\r\n  }\r\n\r\n  renderLines() {\r\n    return _.map(this.props.columns, column => this.renderLine(column));\r\n  }\r\n\r\n  renderLine(column) {\r\n    const pathLines = [];\r\n    let count = 1;\r\n    if (this.props.breakLine) {\r\n      // Remove nulls and NaNs from the line by generating a break in the line\r\n      let currentPoints = null;\r\n      for (const d of this.props.series.events()) {\r\n        const timestamp = new Date(\r\n          d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2\r\n        );\r\n        const value = d.get(column);\r\n        const badPoint =\r\n          _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\r\n        if (!badPoint) {\r\n          if (!currentPoints) currentPoints = [];\r\n          currentPoints.push({ x: timestamp, y: value });\r\n        } else if (currentPoints) {\r\n          if (currentPoints.length > 1) {\r\n            pathLines.push(this.renderPath(currentPoints, column, count));\r\n            count += 1;\r\n          }\r\n          currentPoints = null;\r\n        }\r\n      }\r\n      if (currentPoints && currentPoints.length > 1) {\r\n        pathLines.push(this.renderPath(currentPoints, column, count));\r\n        count += 1;\r\n      }\r\n    } else {\r\n      // Ignore nulls and NaNs in the line\r\n      const cleanedPoints = [];\r\n      for (const d of this.props.series.events()) {\r\n        const timestamp = new Date(\r\n          d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2\r\n        );\r\n        const value = d.get(column);\r\n        const badPoint =\r\n          _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\r\n        if (!badPoint) {\r\n          cleanedPoints.push({ x: timestamp, y: value });\r\n        }\r\n      }\r\n\r\n      pathLines.push(this.renderPath(cleanedPoints, column, count));\r\n      count += 1;\r\n    }\r\n\r\n    return <g key={column}>{pathLines}</g>;\r\n  }\r\n\r\n  render() {\r\n    return <g>{this.renderLines()}</g>;\r\n  }\r\n}\r\n\r\nLineChart.propTypes = {\r\n  /**\r\n   * Show or hide this chart\r\n   */\r\n  visible: PropTypes.bool,\r\n\r\n  /**\r\n   * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize\r\n   */\r\n  series: PropTypes.instanceOf(TimeSeries).isRequired,\r\n\r\n  /**\r\n   * Reference to the axis which provides the vertical scale for drawing.\r\n   * e.g. specifying `axis=\"trafficRate\"` would refer the y-scale of the YAxis\r\n   * with id=\"trafficRate\".\r\n   */\r\n  axis: PropTypes.string.isRequired, // eslint-disable-line\r\n\r\n  /**\r\n   * Which columns from the series to draw.\r\n   *\r\n   * NOTE : Columns can't have periods because periods\r\n   * represent a path to deep data in the underlying events\r\n   * (i.e. reference into nested data structures)\r\n   */\r\n  columns: PropTypes.arrayOf(PropTypes.string),\r\n\r\n  /**\r\n   * The styles to apply to the underlying SVG lines. This is a mapping\r\n   * of column names to objects with style attributes, in the following\r\n   * format:\r\n   *\r\n   * ```\r\n   * const style = {\r\n   *     in: {\r\n   *         normal: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\r\n   *         highlighted: {stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1},\r\n   *         selected: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\r\n   *         muted: {stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1}\r\n   *     },\r\n   *     out: {\r\n   *         ...\r\n   *     }\r\n   * };\r\n   *\r\n   *  <LineChart style={style} ... />\r\n   * ```\r\n   *\r\n   * Alternatively, you can pass in a `Styler`. For example:\r\n   *\r\n   * ```\r\n   * const currencyStyle = Styler([\r\n   *     {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\r\n   *     {key: \"euro\", color: \"#F68B24\", width: 2}\r\n   * ]);\r\n   *\r\n   * <LineChart columns={[\"aud\", \"euro\"]} style={currencyStyle} ... />\r\n   *\r\n   * ```\r\n   */\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.func,\r\n    PropTypes.instanceOf(Styler)\r\n  ]),\r\n\r\n  /**\r\n   * Any of D3's interpolation modes.\r\n   */\r\n  interpolation: PropTypes.oneOf([\r\n    \"curveBasis\",\r\n    \"curveBasisOpen\",\r\n    \"curveBundle\",\r\n    \"curveCardinal\",\r\n    \"curveCardinalOpen\",\r\n    \"curveCatmullRom\",\r\n    \"curveCatmullRomOpen\",\r\n    \"curveLinear\",\r\n    \"curveMonotoneX\",\r\n    \"curveMonotoneY\",\r\n    \"curveNatural\",\r\n    \"curveRadial\",\r\n    \"curveStep\",\r\n    \"curveStepAfter\",\r\n    \"curveStepBefore\"\r\n  ]),\r\n\r\n  /**\r\n   * The determines how to handle bad/missing values in the supplied\r\n   * TimeSeries. A missing value can be null or NaN. If breakLine\r\n   * is set to true (the default) then the line will be broken on either\r\n   * side of the bad value(s). If breakLine is false bad values\r\n   * are simply removed and the adjoining points are connected.\r\n   */\r\n  breakLine: PropTypes.bool,\r\n\r\n  /**\r\n   * The selected item, which will be rendered in the \"selected\" style.\r\n   * If a line is selected, all other lines will be rendered in the \"muted\" style.\r\n   *\r\n   * See also `onSelectionChange`\r\n   */\r\n  selection: PropTypes.string,\r\n\r\n  /**\r\n   * A callback that will be called when the selection changes. It will be called\r\n   * with the column corresponding to the line being clicked.\r\n   */\r\n  onSelectionChange: PropTypes.func,\r\n\r\n  /**\r\n   * The highlighted column, which will be rendered in the \"highlighted\" style.\r\n   *\r\n   * See also `onHighlightChange`\r\n   */\r\n  highlight: PropTypes.string,\r\n\r\n  /**\r\n   * A callback that will be called when the hovered over line changes.\r\n   * It will be called with the corresponding column.\r\n   */\r\n  onHighlightChange: PropTypes.func,\r\n\r\n  /**\r\n   * [Internal] The timeScale supplied by the surrounding ChartContainer\r\n   */\r\n  timeScale: PropTypes.func,\r\n\r\n  /**\r\n   * [Internal] The yScale supplied by the associated YAxis\r\n   */\r\n  yScale: PropTypes.func,\r\n\r\n  /**\r\n   * [Internal] The width supplied by the surrounding ChartContainer\r\n   */\r\n  width: PropTypes.number\r\n};\r\n\r\nLineChart.defaultProps = {\r\n  visible: true,\r\n  columns: [\"value\"],\r\n  smooth: true,\r\n  interpolation: \"curveLinear\",\r\n  breakLine: true\r\n};\r\n"]},"metadata":{},"sourceType":"module"}