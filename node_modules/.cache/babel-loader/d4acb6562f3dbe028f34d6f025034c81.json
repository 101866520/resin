{"ast":null,"code":"/**\r\n *  Copyright (c) 2015, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport _ from \"underscore\";\nexport default class ScaleInterpolator {\n  constructor(transition, ease, observer) {\n    this.id = _.uniqueId(\"scaler\");\n    this.ease = ease;\n    this.transitionTime = transition;\n    this.observer = observer;\n    this.sourceScale = null;\n    this.targetScale = null;\n    this.cachedScaler = null;\n    this.cacheKey = null;\n  }\n\n  update() {\n    let animationTime = 0;\n\n    if (!this.initialTimestamp) {\n      this.initialTimestamp = window.performance.now();\n    } else {\n      animationTime = window.performance.now() - this.initialTimestamp;\n    }\n\n    const animationPosition = this.transitionTime ? Math.min(animationTime / this.transitionTime, 1.0) : 1.0;\n\n    if (!this.targetScale) {\n      return;\n    }\n\n    if (this.observer) {\n      const func1 = this.sourceScale;\n      const func2 = this.targetScale;\n      const te = this.ease(animationPosition);\n\n      const scaler = x => {\n        const a = func1(x);\n        const b = func2(x);\n        return a + (b - a) * te;\n      };\n\n      this.observer(scaler);\n    }\n\n    if (animationPosition < 1.0) {\n      // keep animating\n      setTimeout(() => this.update(), 20);\n    } else {\n      // reset\n      this.sourceScale = this.targetScale;\n      this.targetScale = null;\n      this.initialTimestamp = null;\n    }\n  }\n  /**\r\n  * A new (or initial) scale is set on the interpolator\r\n  */\n\n\n  setScale(key, scale) {\n    // Initial scale\n    if (!this.sourceScale) {\n      this.sourceScale = scale;\n      return;\n    } //\n    //  If there was already a scale, and a new scale is set\n    // the this begins an animation across between the two\n    // scales, assuming a transition time is provided. To do\n    // this we set the new scale as the target and reset the\n    // t to 0. (if there's no transition, jump to t = 1)\n    //\n\n\n    if (key !== this.cacheKey) {\n      this.targetScale = scale;\n      this.cachedScaler = null;\n      this.initialTimestamp = null;\n      setTimeout(() => this.update(), 0);\n    }\n\n    this.cacheKey = key;\n  }\n  /**\r\n  * Returns a scaler, which is a function that scales the value\r\n  * supplied to it. This return the scaler corresponding to the\r\n  * source scale. Note that if a target scale is defined and the\r\n  * interpolator is animating towards that target, the observer\r\n  * callback will be called with the transitional scaler that can\r\n  * be used to scale data to the intermediate state.\r\n  */\n\n\n  scaler() {\n    if (_.isNull(this.cachedScaler)) {\n      this.cachedScaler = v => this.sourceScale(v);\n    }\n\n    return this.cachedScaler;\n  }\n  /**\r\n  * Returns the d3 scale. It will return the target scale if present\r\n  * otherwise the source scale. Note: this is the d3 internal scale. To\r\n  * scale values, use the scaler.\r\n  */\n\n\n  latestScale() {\n    return this.targetScale ? this.targetScale : this.sourceScale;\n  }\n  /**\r\n  * Returns the transition, as set in the constructor\r\n  */\n\n\n  transition() {\n    return this.transitionTime;\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\utils\\interpolators.js"],"names":["_","ScaleInterpolator","constructor","transition","ease","observer","id","uniqueId","transitionTime","sourceScale","targetScale","cachedScaler","cacheKey","update","animationTime","initialTimestamp","window","performance","now","animationPosition","Math","min","func1","func2","te","scaler","x","a","b","setTimeout","setScale","key","scale","isNull","v","latestScale"],"mappings":"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","sourcesContent":["/**\r\n *  Copyright (c) 2015, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\n\r\nexport default class ScaleInterpolator {\r\n    constructor(transition, ease, observer) {\r\n        this.id = _.uniqueId(\"scaler\");\r\n        this.ease = ease;\r\n        this.transitionTime = transition;\r\n        this.observer = observer;\r\n\r\n        this.sourceScale = null;\r\n        this.targetScale = null;\r\n        this.cachedScaler = null;\r\n        this.cacheKey = null;\r\n    }\r\n\r\n    update() {\r\n        let animationTime = 0;\r\n\r\n        if (!this.initialTimestamp) {\r\n            this.initialTimestamp = window.performance.now();\r\n        } else {\r\n            animationTime = window.performance.now() - this.initialTimestamp;\r\n        }\r\n\r\n        const animationPosition = this.transitionTime\r\n            ? Math.min(animationTime / this.transitionTime, 1.0)\r\n            : 1.0;\r\n\r\n        if (!this.targetScale) {\r\n            return;\r\n        }\r\n\r\n        if (this.observer) {\r\n            const func1 = this.sourceScale;\r\n            const func2 = this.targetScale;\r\n            const te = this.ease(animationPosition);\r\n            const scaler = x => {\r\n                const a = func1(x);\r\n                const b = func2(x);\r\n                return a + (b - a) * te;\r\n            };\r\n            this.observer(scaler);\r\n        }\r\n\r\n        if (animationPosition < 1.0) {\r\n            // keep animating\r\n            setTimeout(() => this.update(), 20);\r\n        } else {\r\n            // reset\r\n            this.sourceScale = this.targetScale;\r\n            this.targetScale = null;\r\n            this.initialTimestamp = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n   * A new (or initial) scale is set on the interpolator\r\n   */\r\n    setScale(key, scale) {\r\n        // Initial scale\r\n        if (!this.sourceScale) {\r\n            this.sourceScale = scale;\r\n            return;\r\n        }\r\n\r\n        //\r\n        //  If there was already a scale, and a new scale is set\r\n        // the this begins an animation across between the two\r\n        // scales, assuming a transition time is provided. To do\r\n        // this we set the new scale as the target and reset the\r\n        // t to 0. (if there's no transition, jump to t = 1)\r\n        //\r\n\r\n        if (key !== this.cacheKey) {\r\n            this.targetScale = scale;\r\n            this.cachedScaler = null;\r\n            this.initialTimestamp = null;\r\n            setTimeout(() => this.update(), 0);\r\n        }\r\n\r\n        this.cacheKey = key;\r\n    }\r\n\r\n    /**\r\n   * Returns a scaler, which is a function that scales the value\r\n   * supplied to it. This return the scaler corresponding to the\r\n   * source scale. Note that if a target scale is defined and the\r\n   * interpolator is animating towards that target, the observer\r\n   * callback will be called with the transitional scaler that can\r\n   * be used to scale data to the intermediate state.\r\n   */\r\n    scaler() {\r\n        if (_.isNull(this.cachedScaler)) {\r\n            this.cachedScaler = v => this.sourceScale(v);\r\n        }\r\n        return this.cachedScaler;\r\n    }\r\n\r\n    /**\r\n   * Returns the d3 scale. It will return the target scale if present\r\n   * otherwise the source scale. Note: this is the d3 internal scale. To\r\n   * scale values, use the scaler.\r\n   */\r\n    latestScale() {\r\n        return this.targetScale ? this.targetScale : this.sourceScale;\r\n    }\r\n\r\n    /**\r\n   * Returns the transition, as set in the constructor\r\n   */\r\n    transition() {\r\n        return this.transitionTime;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}