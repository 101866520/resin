{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golde\\\\resin\\\\src\\\\Resizable.js\";\n\n/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n/**\r\n * This takes a single child and inserts a prop 'width' on it that is the\r\n * current width of the this container. This is handy if you want to surround\r\n * a chart or other svg diagram and have this drive the chart width.\r\n */\n\nexport default class Resizable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.handleResize);\n    this.handleResize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (this.container) {\n      this.setState({\n        width: this.container.offsetWidth\n      });\n    }\n  }\n\n  render() {\n    const child = React.Children.only(this.props.children);\n    const childElement = this.state.width ? React.cloneElement(child, {\n      width: this.state.width\n    }) : null;\n    return React.createElement(\"div\", Object.assign({\n      ref: c => {\n        this.container = c;\n      }\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), childElement);\n  }\n\n}\nResizable.propTypes = {\n  children: PropTypes.node\n};","map":{"version":3,"sources":["C:\\Users\\golde\\resin\\src\\Resizable.js"],"names":["React","PropTypes","Resizable","Component","constructor","props","state","width","handleResize","bind","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","container","setState","offsetWidth","render","child","Children","only","children","childElement","cloneElement","c","propTypes","node"],"mappings":";;AAAA;;;;;;;;;AAUA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;;;;;;AAKA,eAAe,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKJ,YAAvC;AACA,SAAKA,YAAL;AACH;;AAEDK,EAAAA,oBAAoB,GAAG;AACnBF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKN,YAA1C;AACH;;AAEDA,EAAAA,YAAY,GAAG;AACX,QAAI,KAAKO,SAAT,EAAoB;AAChB,WAAKC,QAAL,CAAc;AACVT,QAAAA,KAAK,EAAE,KAAKQ,SAAL,CAAeE;AADZ,OAAd;AAGH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAMC,KAAK,GAAGnB,KAAK,CAACoB,QAAN,CAAeC,IAAf,CAAoB,KAAKhB,KAAL,CAAWiB,QAA/B,CAAd;AACA,UAAMC,YAAY,GAAG,KAAKjB,KAAL,CAAWC,KAAX,GACfP,KAAK,CAACwB,YAAN,CAAmBL,KAAnB,EAA0B;AAAEZ,MAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC;AAApB,KAA1B,CADe,GAEf,IAFN;AAGA,WACI;AACI,MAAA,GAAG,EAAEkB,CAAC,IAAI;AACN,aAAKV,SAAL,GAAiBU,CAAjB;AACH;AAHL,OAIQ,KAAKpB,KAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMKkB,YANL,CADJ;AAUH;;AAvCkD;AA0CvDrB,SAAS,CAACwB,SAAV,GAAsB;AAClBJ,EAAAA,QAAQ,EAAErB,SAAS,CAAC0B;AADF,CAAtB","sourcesContent":["/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * This takes a single child and inserts a prop 'width' on it that is the\r\n * current width of the this container. This is handy if you want to surround\r\n * a chart or other svg diagram and have this drive the chart width.\r\n */\r\nexport default class Resizable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { width: 0 };\r\n        this.handleResize = this.handleResize.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.handleResize);\r\n        this.handleResize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n    }\r\n\r\n    handleResize() {\r\n        if (this.container) {\r\n            this.setState({\r\n                width: this.container.offsetWidth\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const child = React.Children.only(this.props.children);\r\n        const childElement = this.state.width\r\n            ? React.cloneElement(child, { width: this.state.width })\r\n            : null;\r\n        return (\r\n            <div\r\n                ref={c => {\r\n                    this.container = c;\r\n                }}\r\n                {...this.props}\r\n            >\r\n                {childElement}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nResizable.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n"]},"metadata":{},"sourceType":"module"}